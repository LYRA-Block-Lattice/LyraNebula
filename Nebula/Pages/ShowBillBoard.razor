@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@page "/showbb"
@using Lyra.Shared
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration

@if (NodeState.Value.IsLoading)
{
    <p><em>Checking all nodes... This may take a while.</em></p>
    <div class="spinner"></div>
}


@if (NodeState.Value.UI == Store.NodeViewUseCase.NodeViewState.UIStage.Profiting)
{
    <div>
        <button class="btn btn-primary" @onclick="Return">Return to node view</button>
    </div>
    <hr />
    @if (NodeState.Value.pft == null)
    {
        <p>No profiting account for node.</p>
    }
    else
    {
        <h1>Profiting Account for Node</h1>
        <p>
            Node Owner Account ID: <a href="/showblock/@NodeState.Value.pft?.OwnerAccountId">@NodeState.Value.pft?.OwnerAccountId.Substring(0, 10)...</a>
        </p>
        <p>
            Profiting Account ID:
            <a href="/showblock/@GetPftID()">@GetPftID()</a>
        </p>
        <p>Total Earn: @NodeState.Value.pftStats.Total LYR</p>
        <p>Profit sharing ratio: @FormatShare() </p>
        <p>Pay to stakers: @GetToStakers() LYR</p>
        <p>Pay to owner: @GetToOwner() LYR</p>
        <p>

        </p>
        <p>
            <div><h4>All Stakings</h4></div>
            <div>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Staking Amount</th>
                            <th>Start Time</th>
                            <th>Staking Days</th>
                            <th>Earns</th>
                            <th>Staking Account</th>
                            <th>Owner Account</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var stk in NodeState.Value.stks)
                        {
                            <tr>
                                <td>@stk.Amount LYR</td>
                                <td>@stk.Time</td>
                                <td>@stk.Days</td>
                                <td>@NodeState.Value.stkRewards[stk.StkAccount] LYR</td>
                                <td>
                                    <a href="/showblock/@stk.StkAccount">@stk.StkAccount.Shorten()</a>
                                </td>
                                <td>
                                    <a href="/showblock/@stk.OwnerAccount">@stk.OwnerAccount.Shorten()</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </p>
        <p style="font-size:xx-small">Note: Statistics data may not be updated in time. Only for reference.</p>
    }
    <hr />
    <div>
        <button class="btn btn-primary" @onclick="Return">Return to node view</button>
    </div>
}

@if (NodeState.Value.UI == Store.NodeViewUseCase.NodeViewState.UIStage.Main && NodeState.Value.nodeStatus != null)
{
    <h1>Status of All Authorizer Nodes </h1>

    <div>
        <table style="padding: 5px" width="100%">
            <tr>
                <td>
                    <div>
                        <button class="btn btn-primary" @onclick="Refresh" disabled="@IsDisabled">
                            Refresh
                        </button>&nbsp;
                        <span>Time Updated (UTC): @NodeState.Value.TimeStamp</span>
                    </div>
                </td>
                <td align="right">
                    <select id="department" @bind="SelectedHistId">
                        @foreach (var hi in BriefHist)
                        {
                            <option value="@hi.id">@hi.TimeStamp</option>
                        }
                    </select>
                </td>
            </tr>
            <tr>
                <td colspan="2">
                    <h3>Total Staking: @NodeState?.Value?.TotalStaking LYR</h3>
                </td>
            </tr>
        </table>
    </div>

    <div>
        <table class="table">
            <thead>
                <tr>
                    <th>Rank</th>
                    <th>Primary</th>
                    <th>Node ID</th>
                    <th>Name</th>
                    <th>Profiting ID</th>
                    <th>Staking LYR</th>
                    <th></th>
                    <th>Endpoint</th>                    
                    <th>Version</th>
                    <th>Status</th>
                    <th>Height</th>
                    <th>Last Cons Block</th>
                    <th>Last Float Hash</th>
                    <th>Candidates</th>
                    <th>Connected Peers</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var nodeInfo in NodeState.Value.GetRankedList(Configuration))
                {
                    string hostName = NodeState.Value.bb.NodeAddresses[nodeInfo.ID];

                    string pfthost = "app.lyra.live";
                    if (Configuration["network"] == "testnet")
                        pfthost = "apptestnet.lyra.live";

                    string style = null;
                    if (nodeInfo.ID == NodeState.Value.bb.CurrentLeader)
                    {
                        style = "color: gold; background-color:black; font-weight: bold;";
                    }
                    else if (nodeInfo.IsPrimary)
                    {
                        style = "background-color:#e0f4ff; ";
                    }
                    var imgSrc = $"/images/country/{nodeInfo.Country?.ToLower() ?? "ua"}.png";

                    <tr style=@style>
                        <td align="center">@nodeInfo.Index</td>
                        <td align="center">@(nodeInfo.IsPrimary ? "Yes" : "No")</td>
                        <td><a href="/showblock/@nodeInfo.ID">@nodeInfo.ID?.Substring(0, 10)...</a></td>
                        <td>@GetProfitingAccountName(nodeInfo.ID)</td>
                        <td>
                            @*<a href="" @onclick="@(e => ShowPft(e, nodeInfo.ID))" @onclick:preventDefault>@GetProfitingAccountShort(nodeInfo.ID)...</a>*@
                            <a href="https://@pfthost/profit/@GetProfitingAccount(nodeInfo.ID)?src=ne" >@GetProfitingAccountShort(nodeInfo.ID)...</a>
                        </td>
                        <td align="right">@GetStakingAmount(nodeInfo.ID)</td>
                        <td align="center"><img src="@imgSrc" alt="@nodeInfo.Country" title="@nodeInfo.Country" /></td>
                        <td><span title="@hostName">@hostName</span></td>
                        @if (nodeInfo.Status != null && nodeInfo.Status.Status != null)
                        {
                            <td>@nodeInfo.Status.Status.version.Replace("LYRA Block Lattice ", "")</td>
                            <td>@nodeInfo.Status.Status.state</td>
                            <td>@nodeInfo.Status.Status.totalBlockCount</td>
                            @if (nodeInfo.Status.LastConsolidationHash == null || nodeInfo.Status.LastConsolidationHash.Length < 11)
                            {
                                <td></td>
                            }
                            else
                            {
                                <td><a href="/showblock/@nodeInfo.Status.LastConsolidationHash">@nodeInfo.Status.LastConsolidationHash.Substring(0, 10)...</a></td>
                            }
                            @if (nodeInfo.Status.Status.lastUnSolidationHash == null || nodeInfo.Status.Status.lastUnSolidationHash.Length < 11)
                            {
                                <td></td>
                            }
                            else
                            {
                                <td>@nodeInfo.Status.Status.lastUnSolidationHash.Substring(0, 10)...</td>
                            }
                            <td align="center">@nodeInfo.Status.Status.activePeers</td>
                            <td align="center">@nodeInfo.Status.Status.connectedPeers</td>
                        }
                        else
                        {
                            <td colspan="7">Failed to connect</td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div style="font-family:verdana;font-size:70%;">
        <h5>Note:</h5>
        <ul>
            <li>The row with color gold is the current leader node. Leader node is randomly chosen from primary node list.</li>
            <li>If API Status shows "Failed to connect" please check if tcp port 5503-5505/mainnet, 4503-4505/testnet are opened by the firewall.</li>
            <li>The minimal votes to become primary is 1,000,000 LYR. </li>
            <li>Data disaplyed may be delayed for several minutes or even hours, depends on the activities of Lyra network.</li>
            <li>If your node is running but not shown in the list, please verify the minimal version required. (>= @Lyra.Core.API.LyraGlobal.MINIMAL_COMPATIBLE_VERSION)</li>
        </ul>
    </div>
}


