@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@page "/webwallet"
@page "/webwallet/swap/{swap?}"

@using Nebula.Store.WebWalletUseCase
@using Nebula.Data
@using Microsoft.Extensions.Configuration
@using Blazored.LocalStorage
@using Microsoft.Extensions.Logging
@using Microsoft.Extensions.Options
@inject IConfiguration Configuration
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject SampleAPI SampleAPI
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject MetamaskService metamaskService
@inject MetamaskInterceptor metamaskInterceptor
@inject ILogger<WebWallet> logger
@inject IOptionsMonitor<SwapOptions> swapOptions
@inject ILyraAPI lyraClient
@using Nethereum.Web3;
@using Nethereum.Hex.HexTypes;

<h1>Web Wallet for @LyraGlobal.PRODUCTNAME</h1>
<hr />
@if (walletState.Value.IsLoading)
{
    <div class="spinner"></div>
}
@if (walletState.Value.IsOpening && walletState.Value.stage == UIStage.Main)
{
   <div><span>
    <button class="btn btn-primary" @onclick="Send">
        Send
    </button>
    <button class="btn btn-primary" @onclick="Refresh">
        Receive
    </button>
    <button class="btn btn-primary" @onclick="Transactions">
        Transactions
    </button>
    <button class="btn btn-primary" @onclick="SwapToken">
        Token Swap
    </button>
@*    <button class="btn btn-primary" @onclick="SwapTLYR">
        TLYR Gateway
    </button>*@
    <button class="btn btn-primary" @onclick="Settings">
        Settings
    </button>
    &nbsp;
    <button class="btn btn-primary" @onclick="CloseWallet">
        Close
    </button></span>
    &nbsp;&nbsp;&nbsp;
    @if(Configuration["network"] != "mainnet" && walletState.Value.wallet.BaseBalance == 0m && walletState.Value.freeTokenTimes < 3 && !walletState.Value.freeTokenSent)
    {
    <span><button style="float: right;" class="btn btn-extra" @onclick="FreeToken">
        Get Free Token
    </button></span>
    }
    </div>
    <hr />
    <div>
        <p><span title="Click to toggle to display" @onclick="ToggleKey">Your wallet's private key is (click to unhide/hide): </span><span>@altDisplay</span></p>
        <p>Your wallet's address is: <a href="/showblock/@walletState.Value.wallet.AccountId">@walletState.Value.wallet.AccountId</a></p>
        <p>Your wallet's balance is: @walletState.Value.balanceString</p>
        <p>Your are now voting for: @walletState.Value.wallet.VoteFor</p>
    </div>
    <div>
        <p style="color: red">Please save private key properly if you want to open this wallet again.</p>
    </div>
}
else if (walletState.Value.IsOpening && walletState.Value.stage == UIStage.Settings)
{
    <h3>Settings</h3>
    <hr />
        <div>
        <p>Vote For Address:
        <input size="100" type="text" @bind="@voteAddr" /></p>
        <hr />
        <button class="btn btn-primary" @onclick="SaveSettings">Save</button>
        <button class="btn btn-primary" @onclick="CancelSave">Cancel</button>
    </div>
}
else if (walletState.Value.IsOpening && walletState.Value.stage == UIStage.Send)
{
    <h3>Sending token</h3>
    <hr />
    <div>
        <p>Destination Wallet Address:<br />
        <input size="120" type="text" @bind="@dstAddr" /></p>
        <p>Token Name:<br />
        <input size="20" type="text" @bind="@tokenName" /></p>
        <p>Amount:<br />
        <input size="20" type="text" @bind="@amount" /></p>
        <hr />
        <button class="btn btn-primary" @onclick="SendToken">Send Token</button>
        <button class="btn btn-primary" @onclick="CancelSend">Cancel</button>
    </div>

}
else if (walletState.Value.IsOpening && walletState.Value.stage == UIStage.Transactions)
{
    <h3>Transactions</h3>
    <hr />
    <div>
        <button class="btn btn-primary" @onclick="Return">Return</button>
    </div>
    @if(walletState.Value.txs != null)
    {
        <pre>
        @foreach(var tx in walletState.Value.txs)
        {
            @tx <br />

        }
        </pre>
    <div>
        <button class="btn btn-primary" @onclick="Return">Return</button>
    </div>
    }
}
else if (walletState.Value.IsOpening && walletState.Value.stage == UIStage.SwapToken)
{
    <h3>Lyra Swap</h3>
    <hr />        
    <h5>Swap from:</h5>
    <div>
        <span>    
            <select style="height: 40px; width: 380px" @bind="swapFromToken">
            @foreach (var tkn in LyraAsserts)
            {
                <option value="@tkn.Name">@tkn.Name</option>
            }
            </select>
        </span>
        <span>
            <input style="height: 40px; " size="20" placeholder="Count" type="text" @bind="@swapFromCount" />
        </span>
    </div>
    <p>@fromTokenBalance @swapFromToken available to swap</p>
    <h5>Swap to:</h5>
    <div>
        <span>
            <select style="height: 40px; width: 380px" @bind="swapToToken">
            @foreach (var tkn in LyraAsserts)
            {
                <option value="@tkn.Name">@tkn.Name</option>
            }
            </select>
        </span>
    </div>
    <br />
    <div>
         Slippage: <input size="5" type="text" @bind="@slippage" /> %
    </div>
    <hr />
    <p>
        <div>Minimum Received: @swapToCount @swapToToken.</div>
    @if(swapCalculator != null)
    {
        <div>Price: @(swapCalculator.Price) @swapFromToken per @swapToToken</div>
        <div>Price Impact: @(Math.Round(swapCalculator.PriceImpact * 100, 4))%</div>
        <div>Liquidate pool provider fee: @swapCalculator.PayToProvider @swapFromToken</div>
        <div>Lyra protocol fee: @swapCalculator.PayToAuthorizer LYR</div>
    }
    </p>
    <p><pre>@PoolInfo</pre></p>
    <hr style="color: white" />
    <div>
        <button disabled="@IsDisabled" class="btn btn-primary" @onclick="DoSwapLyraToken">Swap</button>
    </div>
    <p>@swapResultMessage</p>
    <hr style="color: white" />
    <p>@walletState.Value.Message</p>
    <div>
        <button class="btn btn-primary" @onclick="Return">Return</button>
    </div>
}
else if (walletState.Value.IsOpening && walletState.Value.stage == UIStage.SwapTLYR)
{
    <h3>Swap tokens between LYR and TLYR (ERC20 Tether of LYR)</h3>
    @if(Configuration["network"] == "testnet")
    {
        <p>Current supported Ethereum network: Rinkeby Test Network.</p>
    }
    @if(Configuration["network"] == "mainnet")
    {
        <p>Current supported Ethereum network: Ethereum Main Network.</p>
    }
    <p>Add TLYR token to MetaMask by Ethereum Contract hash: @swapOptions.CurrentValue.ethContract</p>
    <p>Balance of LYR reserve account: <b>@lyrReserveBalance</b></p>
    <p>Balance of TLYR reserve account: <b>@tlyrReserveBalance</b></p>
    <p style="color:blue"><i>@queryingNotify</i></p>
    @if(!MetamaskAvailable)
    {
        <p>To use swap, you need to install MetaMask wallet. </p>
        <NavLink href="https://metamask.io/download.html">Get MetaMask</NavLink> 
    }
    else
    {
        <hr />
        @if(!EthereumEnabled)
        {
            <button class="btn btn-primary" @onclick="@EnableEthereumAsync">Connect MetaMask Wallet</button>
            <hr />
        }
        else
        {
            <h3>Swap between LYR and TLYR</h3>
            <p>My Lyra Account @walletState.Value.wallet.AccountId on @Configuration["network"]</p>
            <p>My Etnereum Account @SelectedAccount on @CurrentChainName</p>
        
        <h5>Swap from:</h5>
        <div>
            <span>    
                <select style="height: 30px; width: 80px" @bind="swapFromToken">
                    <option selected>LYR</option>
                    <option>TLYR</option>
                </select>
            </span>
            <span>
                <input size="30" placeholder="Count" type="text" @bind="@swapFromCount" />
            </span>
        </div>
        <p>@fromTokenBalance @swapFromToken available to swap</p>
        <h5>Swap to:</h5>
        <div>
            <span>
                <select style="height: 30px; width: 80px" @bind="swapToToken">
                    <option>LYR</option>
                    <option selected>TLYR</option>
                </select>
            </span>
            <span>
                <input size="130" placeholder="Swap To Address" type="text" @bind="@swapToAddress" />
            </span>
        </div>
        <p>You will get @swapToCount @swapToToken to address @swapToAddress</p>
        <hr style="color: white" />
        <p>Service fee: @swapFeeDesc</p>
        <hr />
        <div>
            <button disabled="@IsDisabled" class="btn btn-primary" @onclick="BeginSwapTLYR">Swap</button>
        </div>
        <p>@swapResultMessage</p>
        <p>@walletState.Value.Message</p>
        }
    }
    <div>
        <button class="btn btn-primary" @onclick="Return">Return</button>
    </div>
}
else if (walletState.Value.IsOpening && walletState.Value.stage == UIStage.FreeToken)
{
    <h3>Verify and get free LYR</h3>
    <hr />
    <div>
            <p>Current balance of faucet account: <em>@walletState.Value.faucetBalance</em> LYR</p>
    </div>

    <div class="section">
        <ReCAPTCHA @ref="reCAPTCHAComponent" SiteKey="6Lftd8gZAAAAAK5G9aHUFY7wtV1yocfAf2Vj-EmI" OnSuccess="OnSuccess" OnExpired="OnExpired" />
    </div>

    <div class="section">
        <button class="btn btn-extra" @onclick="OnClickPost" disabled="@walletState.Value.DisablePostButton">
            Send me Token!
        </button>
        &nbsp;&nbsp;
        <button class="btn btn-primary" @onclick="Return">Return</button>
    </div>
}
else
{
    <div>
    <button class="btn btn-primary" @onclick="CreateWallet">
        Create New Wallet
    </button>
    </div>
    <hr />
    <div>
        <p>Private Key:</p>
        <p><input size="100" type="text" @bind="prvKey" /></p>
        <p><input type="checkbox" @bind="selfVote" id="chkVote" />&nbsp;<label for="chkVote">Self Vote</label></p>
        <p><button class="btn btn-primary" @onclick="RestoreWallet">
            Restore Wallet
        </button></p>
    </div>
}

@code {
    private ReCAPTCHA reCAPTCHAComponent;

    private void OnSuccess()
    {
        Dispatcher.Dispatch(new WebWalletReCAPTCHAValidAction{ValidReCAPTCHA = true});
    }

    private void OnExpired()
    {
        Dispatcher.Dispatch(new WebWalletReCAPTCHAValidAction{ValidReCAPTCHA = false});
    }

    private async Task OnClickPost()
    {
        if (walletState.Value.ValidReCAPTCHA)
        {
            var response = await reCAPTCHAComponent.GetResponseAsync();
            try
            {
                Dispatcher.Dispatch(new WebWalletReCAPTCHAServerAction{ServerVerificatiing = true});

                var result = await SampleAPI.Post(response);
                if (result.Success)
                {
                    Dispatcher.Dispatch(new WebWalletSendMeFreeTokenAction { 
                        wallet = walletState.Value.wallet,
                        faucetPvk = Configuration["faucetPvk"]
                    });
                    //Navigation.NavigateTo("/valid");
                }
                else
                {
                    await JS.InvokeAsync<object>("alert", string.Join(", ", result.ErrorCodes));
                    
                    Dispatcher.Dispatch(new WebWalletReCAPTCHAServerAction{ServerVerificatiing = false});
                }
            }
            catch (HttpRequestException e)
            {
                await JS.InvokeAsync<object>("alert", e.Message);

                Dispatcher.Dispatch(new WebWalletReCAPTCHAServerAction{ServerVerificatiing = false});
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var key = Configuration["network"] + "freelyr";
        if(walletState.Value.freeTokenTimes.HasValue)
        {
            // if it need save
            var oldValue = await localStore.GetItemAsync<string>(key);
            int oldCount;
            if(oldValue == null || (int.TryParse(oldValue, out oldCount) && oldCount < walletState.Value.freeTokenTimes))
            {
                await localStore.SetItemAsync(key, walletState.Value.freeTokenTimes.ToString());
            }
        }
        else
        {
            var oldValue = await localStore.GetItemAsync<string>(key);
            int oldCount;
            if(oldValue != null && int.TryParse(oldValue, out oldCount))
            {
                walletState.Value.freeTokenTimes = oldCount;
            }
            else
            {
                walletState.Value.freeTokenTimes = 0;
            }
        }

        MetamaskAvailable = await metamaskService.CheckMetamaskAvailability();
    }

    // swap
    bool MetamaskAvailable { get; set; }
    bool EthereumEnabled { get; set; }
    string CurrentChainName { get; set; }
    string SelectedAccount { get; set; }
    string BlockHash { get; set; }
    string TransactionHash { get; set; }
    string ErrorTransferMessage { get; set; }

    protected async Task EnableEthereumAsync()
    {
        EthereumEnabled = await metamaskService.EnableEthereumAsync();
        if (EthereumEnabled)
        {
            var dotNetObjRef = DotNetObjectReference.Create(this);
            var bOk = await metamaskService.RegisterEventsAsync(dotNetObjRef);

            CurrentChainName = await metamaskService.GetChainName();
            SelectedAccount = await metamaskService.GetSelectedAccount();
        }
    }

    protected async Task GetBlockHashAsync()
    {
        var web3 = new Nethereum.Web3.Web3();
        web3.Client.OverridingRequestInterceptor = metamaskInterceptor;
        var block = await web3.Eth.Blocks.GetBlockWithTransactionsByNumber.SendRequestAsync(new HexBigInteger(1));
        BlockHash = block.BlockHash;
    }

    protected async Task TransferEtherAsync()
    {
        try {
            var web3 = new Nethereum.Web3.Web3();
            web3.Client.OverridingRequestInterceptor = metamaskInterceptor;

            TransactionHash = await web3.Eth.GetEtherTransferService().TransferEtherAsync("0x13f022d72158410433cbd66f5dd8bf6d2d129924", 0.001m);
        }
        catch(Exception ex)
        {
            ErrorTransferMessage = ex.Message;
        }
    }
}
