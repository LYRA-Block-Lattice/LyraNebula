@using Lyra.Data.Crypto
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration

@if (ui == UI.Entry)
{
<Button Type="@ButtonType.Primary" OnClick="@(async ()=>{ await AddLiquidity(); })">Add Liquidity</Button>


<p>
    <div>Your Liquidity</div>
</p>
<div>No Liquidity Found</div>
}

@if(ui == UI.Adding)
{
    <div>
        <Button Type="@ButtonType.Primary"
            Icon="@IconType.Outline.ArrowLeft"
            OnClick="BackEntry" />
            Add Liquidity
    </div>
    <div>
        <table>
            <tr>
                <td>Input</td>
                <td>Balance: --</td>
            </tr>
                        <tr>
                <td><AntDesign.Input Placeholder="Enter an amount" @bind-Value="@amount1" /></td>
                <td>LYR</td>
            </tr>
            <tr>
                <td>+</td>
                <td></td>
            </tr>
            <tr>
                <td>Input</td>
                <td>Balance: --</td>
            </tr>
            <tr>
                <td><AntDesign.Input Placeholder="Enter an amount" @bind-Value="@amount2" /></td>
                <td>
                    <Select DataSource="@tickers"
                        @bind-Value="@selectedTicker"
                        Style="width:220px"
                        OnSelectedItemChanged="OnSelectedItemChangedHandler">
                    </Select>
                </td>
            </tr>
        </table>
    </div>

<div>

</div>
}

@code {

    enum UI { Entry, Adding }
    UI ui;

    decimal amount1, amount2;
    List<string> tickers;
    string selectedTicker;

    protected override void OnInitialized()
    {
        ui = UI.Entry;


    }

    private void BackEntry()
    {
        ui = UI.Entry;
    }

    private async Task AddLiquidity()
    {
        var lc = LyraRestClient.Create(Configuration["network"], Environment.OSVersion.ToString(), "Nebula", "1.4");

        // for api sign only
        var pk = "n4uh7o2kAerPZQSNBRirzA3pSUBEuEhs6r7oRwpV6Dgbs3FvY";
        var pub = "LBRzScs8NwMcr7U8i9a8sSWETseWf3TLge4CVJy6as24hSB4hwtZ5jKTbHJdoVZBJiNC2LpjN9MQB719Py9YxXo2xpLxnS";

        var lsbret = await lc.GetLastServiceBlockAsync();

        var sign = Signatures.GetSignature(pk, (lsbret.GetBlock() as ServiceBlock).Hash, pub);
        var tokens = await lc.GetTokenNamesAsync(pub, sign, "(null)");

        tickers = tokens.Entities;

        ui = UI.Adding;
    }

    private void OnSelectedItemChangedHandler(string value)
    {
        Console.WriteLine($"selected: ${value}");
    }
}
