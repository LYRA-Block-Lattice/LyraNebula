@using Fluxor
@using Lyra.Data.Crypto
@using Microsoft.Extensions.Configuration
@using Nebula.Store.WebWalletUseCase
@inject IConfiguration Configuration
@inject ILyraAPI lyraClient
@inject MessageService _message

@if (ui == UI.Entry)
{
    <Button Type="@ButtonType.Primary" OnClick="@(async ()=>{ await OpenAddLiquidityUI(); })">Add Liquidity</Button>


    <p>
        <div>Your Liquidity</div>
    </p>
    <div>No Liquidity Found</div>
}

@if (ui == UI.Adding)
{
    <div style="padding: 14px">
        <Button Type="@ButtonType.Primary" Shape="@ButtonShape.Circle"
            Icon="@IconType.Outline.ArrowLeft"
            OnClick="BackEntry" />
        &nbsp;Add Liquidity
    </div>
    <div style="padding: 14px">
        <table>
            <tr>
                <td>Input</td>
                <td>Balance: @balance1</td>
            </tr>
            <tr>
                <td><AntDesign.Input TValue="decimal" Placeholder="Enter an amount" @bind-Value="@amount1" OnChange="@updateBtn" /></td>
                <td>
                    <Select DataSource="@tickers"
                        @bind-Value="@selectedTicker1"
                        Style="width:220px"
                        OnSelectedItemChanged="OnSelectedItemChangedHandler1">
                    </Select>
                </td>
            </tr>
            <tr>
                <td>+</td>
                <td></td>
            </tr>
            <tr>
                <td>Input</td>
                <td>Balance: @balance2</td>
            </tr>
            <tr>
                <td><AntDesign.Input TValue="decimal" Placeholder="Enter an amount" @bind-Value="@amount2" OnChange="@updateBtn" /></td>
                <td>
                    <Select DataSource="@tickers"
                        @bind-Value="@selectedTicker2"
                        Style="width:220px"
                        OnSelectedItemChanged="OnSelectedItemChangedHandler2">
                    </Select>
                </td>
            </tr>
            @if(havepool)
            {
                <tr>
                    <td>Token Pair</td>
                    <td></td>
                </tr>
                <tr>
                    <td>Total Liquidate</td>
                    <td></td>
                </tr>
                <tr>
                    <td colspan="2">
                        <Button Disabled="@(!alenabled)" Block Type="@ButtonType.Primary" OnClick="@(async ()=>{ await PoolDeposit(); })">Add Liquidate</Button>
                    </td>
                </tr>
            }
            else
            {
                <tr>
                <td colspan="2" style="padding: 14px">
                    @if(walletState.Value.wallet == null)
                    {
                        <a href="/webwallet"> <Button Block Type="@ButtonType.Primary">Open Wallet</Button></a>
                    }
                    else
                    {
                        <Button Disabled="@(!clenabled)" Block Type="@ButtonType.Primary" OnClick="@(async ()=>{ await CreateLiquidity(); })">Create Liquidity Pool</Button>
                    }
                </td>
            </tr>

            }

        </table>
    </div>

}

@code {

    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    enum UI { Entry, Adding }
    UI ui;

    decimal amount1, amount2;
    decimal balance1, balance2;
    List<string> tickers;
    string selectedTicker1;
    string selectedTicker2;

    bool havepool;
    bool clenabled;
    bool alenabled;

    string apiresult;

    public Pool()
    {
    }

    protected override void OnInitialized()
    {
        ui = UI.Entry;
        base.OnInitialized();
    }

    private void BackEntry()
    {
        ui = UI.Entry;
    }

    private async Task PoolDeposit()
    {
        var result = await walletState.Value.wallet.AddLiquidateToPoolAsync(selectedTicker1, amount1, selectedTicker2, amount2);
        if(result.Successful())
        {
            _message.Success($"Add liquidate success.");
        }
        else
        {                
            _message.Error($"Failed add liquidate. {result.ResultCode}");
        }
    }

    private async Task CreateLiquidity()
    {
        var poolCreateResult = await walletState.Value.wallet.CreateLiquidatePoolAsync(selectedTicker1, selectedTicker2);
        if(poolCreateResult.Successful())
        {
            await Task.Delay(5000);
            await _message.Success($"Waiting for pool be created...");
            await Task.Delay(5000);
            await PoolDeposit();
        }
        else
        {
            _message.Error($"Pool created failed. {poolCreateResult.ResultCode}");
        }

    }

    private async Task OpenAddLiquidityUI()
    {
        var lc = LyraRestClient.Create(Configuration["network"], Environment.OSVersion.ToString(), "Nebula", "1.4");

        // for api sign only
        var pk = "n4uh7o2kAerPZQSNBRirzA3pSUBEuEhs6r7oRwpV6Dgbs3FvY";
        var pub = "LBRzScs8NwMcr7U8i9a8sSWETseWf3TLge4CVJy6as24hSB4hwtZ5jKTbHJdoVZBJiNC2LpjN9MQB719Py9YxXo2xpLxnS";

        var lsbret = await lc.GetLastServiceBlockAsync();

        var sign = Signatures.GetSignature(pk, (lsbret.GetBlock() as ServiceBlock).Hash, pub);
        var tokens = await lc.GetTokenNamesAsync(pub, sign, "(null)");

        tickers = tokens.Entities
            .Where(a => !a.StartsWith("unittest/"))
            .ToList();
        tickers.Insert(0, "LYR");

        ui = UI.Adding;
    }

    private void updateBtn(decimal a)
    {
        havepool = false;
        if(selectedTicker1 != null && selectedTicker2 != null && selectedTicker1 != selectedTicker2)
        {
            _ = Task.Run(async () =>
            {
                var lc = LyraRestClient.Create(Configuration["network"], Environment.OSVersion.ToString(), "Nebula", "1.4");
                var existspool = await lc.GetPoolAsync(selectedTicker1, selectedTicker2);
                if (existspool.PoolAccountId != null)
                {
                    havepool = true;
                    await InvokeAsync(() => StateHasChanged());
                }                    
            });
        }

        clenabled = amount1 > 0 && amount2 > 0 && balance1 > 0 && balance2 > 0 && selectedTicker1 != selectedTicker2;
        alenabled = amount1 > 0 && amount2 > 0;
    }

    private void OnSelectedItemChangedHandler1(string value)
    {
        if(walletState.Value.wallet != null)
        {
            var blk = walletState.Value.wallet.GetLatestBlock();
            if (blk.Balances.ContainsKey(value))
                balance1 = blk.Balances[value].ToBalanceDecimal();
            else
                balance1 = 0;
        }
        else
            balance1 = 0;

        updateBtn(0);
    }
    private void OnSelectedItemChangedHandler2(string value)
    {
        if(walletState.Value.wallet != null)
        {
            var blk = walletState.Value.wallet.GetLatestBlock();
            if (blk.Balances.ContainsKey(value))
                balance2 = blk.Balances[value].ToBalanceDecimal();
            else
                balance2 = 0;
        }
        else
            balance2 = 0;

        updateBtn(0);
    }
}
