@using Fluxor
@using Lyra.Data.Crypto
@using Microsoft.Extensions.Configuration
@using Nebula.Store.WebWalletUseCase
@inject IConfiguration Configuration
@inject ILyraAPI lyraClient
@inject MessageService _message

<table>


    <tr>
        <td>Input</td>
        <td>Balance: @balance1</td>
    </tr>
    <tr>
        <td><AntDesign.Input TValue="decimal" Placeholder="Enter an amount" @bind-Value="@amount1" OnChange="@updateBtn1" /></td>
        <td>
            <Select DataSource="@tickers"
                    @bind-Value="@selectedTicker1"
                    Style="width:220px"
                    OnSelectedItemChanged="OnSelectedItemChangedHandler1">
            </Select>
        </td>
    </tr>
    <tr>
        <td>+</td>
        <td></td>
    </tr>
    <tr>
        <td>Input</td>
        <td>Balance: @balance2</td>
    </tr>
    <tr>
        <td><AntDesign.Input TValue="decimal" Placeholder="Enter an amount" @bind-Value="@amount2" OnChange="@updateBtn2" /></td>
        <td>
            <Select DataSource="@tickers"
                    @bind-Value="@selectedTicker2"
                    Style="width:220px"
                    OnSelectedItemChanged="OnSelectedItemChangedHandler2">
            </Select>
        </td>
    </tr>
@if (haspoolinfo)
    {
        <tr>
            <td colspan="2"><Divider>Pair Infomation</Divider></td>
        </tr>
        <tr>
            <td>Token Pair</td>
            <td>@pairinfo</td>
        </tr>
        <tr>
            <td>Total Liquidate</td>
            <td>@pairliquid</td>
        </tr>
        <tr>
            <td>Your Liquidate Share</td>
            <td>@pairshare</td>
        </tr>
    }
    @if (canswap)
    {


    }
</table>

@code {
    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    decimal amount1, amount2;
    decimal balance1, balance2;
    List<string> tickers;
    string selectedTicker1;
    string selectedTicker2;

    RenderFragment pairinfo, pairliquid, pairshare;
    bool haspoolinfo;
    bool canswap;

    private void updateBtn1(decimal a)
    {
        updateBtn(a);
    }

    private void updateBtn2(decimal a)
    {
        updateBtn(a);
    }
    private void updateBtn(decimal a)
    {

    }

    private void OnSelectedItemChangedHandler1(string value)
    {
        UpdateBalance();
    }
    private void OnSelectedItemChangedHandler2(string value)
    {
        UpdateBalance();
    }
    private void UpdateBalance()
    {
        if (walletState.Value.wallet != null)
        {
            var blk = walletState.Value.wallet.GetLatestBlock();

            if(selectedTicker1 != null)
                if (blk.Balances.ContainsKey(selectedTicker1))
                    balance1 = blk.Balances[selectedTicker1].ToBalanceDecimal();
                else
                    balance1 = 0;

            if(selectedTicker2 != null)
                if (blk.Balances.ContainsKey(selectedTicker2))
                    balance2 = blk.Balances[selectedTicker2].ToBalanceDecimal();
                else
                    balance2 = 0;
        }

        _ = Task.Run(async () =>
        {
            var lc = LyraRestClient.Create(Configuration["network"], Environment.OSVersion.ToString(), "Nebula", "1.4");

            var existspool = await lc.GetPoolAsync(selectedTicker1, selectedTicker2);
            if (existspool.Successful())
            {
                var platest = existspool.GetBlock() as TransactionBlock;
                var pool = platest as IPool;
                CreatePoolInfo(existspool.Token0, existspool.Token1, platest);
            }
            else
            {
                CreatePoolInfo(null, null, null);
            }
            
            await InvokeAsync(() => StateHasChanged());
        });

        //InvokeAsync(() => StateHasChanged());
    }

    private async Task OpenSwapUI()
    {
        var lc = LyraRestClient.Create(Configuration["network"], Environment.OSVersion.ToString(), "Nebula", "1.4");

        // for api sign only
        var pk = "n4uh7o2kAerPZQSNBRirzA3pSUBEuEhs6r7oRwpV6Dgbs3FvY";
        var pub = "LBRzScs8NwMcr7U8i9a8sSWETseWf3TLge4CVJy6as24hSB4hwtZ5jKTbHJdoVZBJiNC2LpjN9MQB719Py9YxXo2xpLxnS";

        var lsbret = await lc.GetLastServiceBlockAsync();

        var sign = Signatures.GetSignature(pk, (lsbret.GetBlock() as ServiceBlock).Hash, pub);
        var tokens = await lc.GetTokenNamesAsync(pub, sign, "(null)");

        tickers = tokens.Entities
            .Where(a => !a.StartsWith("unittest/"))
            .ToList();
        tickers.Insert(0, "LYR");
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (walletState.Value.wallet != null)
            await walletState.Value.wallet.SyncAsync(null);
        await OpenSwapUI();
    }


    private void CreatePoolInfo(string token0, string token1, TransactionBlock platest)
    {
        if(token0 != null)
        {
            var info = $"{token0} vs {token1}";
            pairinfo =
    @<p>@info</p>
    ;

            if (platest.Balances.ContainsKey(token0))
            {
                var line1 = $"{platest.Balances[token0].ToBalanceDecimal()} {token0}";
                var line2 = $"{platest.Balances[token1].ToBalanceDecimal()} {token1}";
                pairliquid =
    @<p>
        @line1<br />
        @line2
    </p>
    ;
            }
            else
            {
                pairliquid =
    @<p>No Liquidate in Pool</p>
    ;
            }
        }
        else
        {
                        pairinfo =
    @<p>No pool for selected token pair.</p>
    ;

                    pairliquid =
    @<p>No Liquidate in Pool</p>
    ;
        }


        var pool = platest as IPool;
        if(pool != null)
        {
            if (pool.Shares.ContainsKey(walletState.Value.wallet.AccountId))
            {
                var shareinfo = $"{pool.Shares[walletState.Value.wallet.AccountId].ToRitoDecimal() * 100} %";
                pairshare =
    @<p>@shareinfo</p>
    ;
            }
            else
            {
                pairshare =
    @<p>You don't have Share in Pool</p>
    ;
            }
        }
                    else
            {
                pairshare =
    @<p>No Share in Pool</p>
    ;
            }

        haspoolinfo = true;

        ;
    }
}
