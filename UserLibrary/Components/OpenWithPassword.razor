@namespace UserLibrary.Components
@using DexServer.Ext
@using System.ComponentModel
@using Fluxor
@using Lyra.Core.API
@using Lyra.Core.Accounts
@using Lyra.Core.Blocks
@using Lyra.Data.API
@using Lyra.Shared
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Configuration
@using Nebula.Data
@using Nebula.Store.WebWalletUseCase
@using UserLibrary.Data
@inject IConfiguration Configuration
@inject NavigationManager UriHelper


    <div class="flex-container">
        <div class="mid">
            <TextEdit Role="TextRole.Password" Placeholder="Password" Size="Size.Large" @bind-Text="@txtValue1" />
        </div>
        <div class="mid">
            <Button Color="Color.Primary" Clicked="@OpenWallet">Open Wallet</Button>
        </div>
        <div class="mid">
            <Divider Style="width: 0px; height: 0px" />
        </div>
        <div class="mid">
        <a href="/login/key"><Button>Open with Private Key</Button></a>
        </div>
    </div>



<Styled>
    .custom-password-icon {
        color: rgba(0,0,0,.45);
        cursor: pointer;
        transition: all .3s;
    }

        .flex-container {
        display:flex; 
        flex-direction: column;
        gap: 20px;
        justify-content:center;
        align-items:center;
        height: 100%;
        width: 100%;
    }

    .mid {
        align-self: center;
    }

    .bot {
        align-self: flex-end;
    }

</Styled>

@code {
    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    private string txtValue1 { get; set; }
    private string txtValue2 { get; set; }
    private bool visible = false;

    private void OpenWallet()
    {
        var storeName = "nebstor";

        Dispatcher.Dispatch(new WebWalletOpenAction
            {
                store = storeName,
                name = "default",
                password = txtValue1
            });
    }

    protected override void OnInitialized()
    {
        walletState.StateChanged += this.WalletChanged;

        base.OnInitialized();
    }

    private void WalletChanged(object sender, WebWalletState wallet)
    {
        if(wallet.wallet != null)
        {
            walletState.StateChanged -= this.WalletChanged;
            UriHelper.NavigateTo("wallet");
        }
    }

        public void Dispose()
    {
        walletState.StateChanged -= this.WalletChanged;
    }
}
