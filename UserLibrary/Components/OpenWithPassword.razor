@namespace UserLibrary.Components
@using AntDesign
@using DexServer.Ext
@using System.ComponentModel
@using AntDesign.TableModels
@using Fluxor
@using Lyra.Core.API
@using Lyra.Core.Accounts
@using Lyra.Core.Blocks
@using Lyra.Data.API
@using Lyra.Shared
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Configuration
@using Nebula.Data
@using Nebula.Store.WebWalletUseCase
@using UserLibrary.Data
@inject IConfiguration Configuration
@inject NavigationManager UriHelper


    <div class="flex-container">
        <div class="mid">
            <InputPassword @bind-Value="@txtValue1" Placeholder="large Password" Size="@InputSize.Large" OnPressEnter="(e)=>Submit(e, txtValue1)" />
        </div>
        <div class="mid">
            <Button Type="@ButtonType.Primary" OnClick="@OpenWallet">Open Wallet</Button>
        </div>
        <div class="mid">
            <Divider Style="width: 0px; height: 0px" />
        </div>
        <div class="mid">
        <a href="/wallet"><Button Type="@ButtonType.Link">Open with Private Key</Button></a>
        </div>
    </div>



<Styled>
    .custom-password-icon {
        color: rgba(0,0,0,.45);
        cursor: pointer;
        transition: all .3s;
    }

        .flex-container {
        display:flex; 
        flex-direction: column;
        gap: 20px;
        justify-content:center;
        align-items:center;
        height: 100%;
        width: 100%;
    }

    .mid {
        align-self: center;
    }

    .bot {
        align-self: flex-end;
    }

</Styled>

@code {
    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    RenderFragment actionSetting(Func<Task> clickActionAsync, Dictionary<string, object> iconAttributes) =>
    @<Icon @attributes="@iconAttributes" OnClick="@clickActionAsync" />
    ;

    private string txtValue1 { get; set; }
    private string txtValue2 { get; set; }
    private bool visible = false;
    private InputPassword _inputPassword;

    Dictionary<string, object> hideAttributes  = new() {
        ["Type"] = "eye-invisible",        
        ["Style"] = ""
    };

    Dictionary<string, object> showAttributes  = new() {        
        ["Type"] = "eye",        
        ["Style"] = "color: #1890ff"
    };

    Dictionary<string, object> attributes = new() {
        ["Class"] = "custom-password-icon",
        ["Type"] = "eye-invisible",
        ["Theme"] = "outline"
    };

    private void Submit(KeyboardEventArgs args, string password)
    {
        Console.WriteLine($"password: {password}");
    }

    private async Task OnClick() 
    {
        Console.WriteLine("Custom icon clicked");
        visible = !visible;
        if (visible)
            attributes = showAttributes;
        else
            attributes = hideAttributes;
        await _inputPassword.Focus();
    }

    private void OpenWallet()
    {
        var storeName = "nebstor";

        Dispatcher.Dispatch(new WebWalletOpenAction
            {
                store = storeName,
                name = "default",
                password = txtValue1
            });
    }

    protected override void OnInitialized()
    {
        walletState.StateChanged += this.WalletChanged;

        base.OnInitialized();
    }

    private void WalletChanged(object sender, WebWalletState wallet)
    {
        if(wallet.wallet != null)
        {
            walletState.StateChanged -= this.WalletChanged;
            UriHelper.NavigateTo("wallet");
        }
    }

        public void Dispose()
    {
        walletState.StateChanged -= this.WalletChanged;
    }
}
