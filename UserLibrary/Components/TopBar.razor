@namespace UserLibrary.Components

@using Fluxor
@using Lyra.Core.API
@using Nebula.Store.WebWalletUseCase

<div class="top-row px-4">
    <div>
        @banner
    </div>
    <div>
        <a href="https://lyra.live/" target="_blank">About</a>
    </div>
</div>

<Styled>
    
.top-row {
    background-color: #f7f7f7;
    border-bottom: 1px solid #d6d5d5;
    justify-content: space-between;
    align-items: center;
    align-content: center;
    height: 3.5rem;
    display: flex;
}

    .top-row ::deep a, .top-row .btn-link {
        white-space: nowrap;
        margin-left: 1.5rem;
    }

    .top-row a:first-child {
        overflow: hidden;
        text-overflow: ellipsis;
    }

@@media (max-width: 640.98px) {
    .top-row:not(.auth) {
        display: none;
    }

    .top-row.auth {
        justify-content: space-between;
    }

    .top-row a, .top-row .btn-link {
        margin-left: 0;
    }
}

@@media (min-width: 641px) {

    .top-row {
        position: sticky;
        top: 0;
        z-index: 1;
    }

    .top-row, article {
        padding-left: 2rem !important;
        padding-right: 1.5rem !important;
    }
}

</Styled>

@code
{
    [Inject]
    private IState<WebWalletState>? walletState { get; set; }

    RenderFragment? banner;

    protected override void OnInitialized()
    {
        WalletChanged(this, walletState.Value);

        walletState.StateChanged += this.WalletChanged;

        base.OnInitialized();
    }

    private void WalletChanged(object sender, WebWalletState wallet)
    {
        decimal balance1 = 0;
        if (wallet.wallet != null)
        {
            var blk = wallet.wallet.GetLatestBlock();
            if(blk!= null)
            {
                if (blk.Balances.ContainsKey("LYR"))
                    balance1 = blk.Balances["LYR"].ToBalanceDecimal();

            var bs = $"{balance1:N2}";
            banner = 
    @<div>Balance: <b>@bs</b> LYR</div>
        ;
            }
            else
            {
                banner = 
    @<div>Wallet is empty.</div>;
            }
        }
        else
            banner = 
    @<div>Wallet is not opened.</div>;
    }

    public void Dispose()
    {
        walletState.StateChanged -= this.WalletChanged;
    }
}