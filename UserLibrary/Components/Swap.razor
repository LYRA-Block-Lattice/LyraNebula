@namespace UserLibrary.Components

@using CoinGecko.Clients
@using CoinGecko.Interfaces
@using Fluxor
@using Lyra.Core.API
@using Lyra.Core.Blocks
@using Lyra.Data.API
@using Lyra.Data.Crypto
@using Microsoft.Extensions.Configuration
@using Nebula.Store.WebWalletUseCase
@using UserLibrary.Data
@inject IConfiguration _config
@inject ILyraAPI lyraClient

@if (busy)
{
    <div style="z-index: 5;" class="spinner"></div>
}

<div class="swc">

    <table cellspacing="0" cellpadding="0" class="swt">


        <tr>
            <td>From</td>
            <td>Balance: @($"{balance1:N8}")</td>
        </tr>
        <tr>
            <td>
                <div class="round">
                    <MudNumericField T="decimal" Style="width: 100px; background: white; border:none;" lang="en-us" DecimalsSeparator="."
                                 @bind-Value="@amount1" />
                </div>
            </td>
            <td>
                <div class="round">
                            <TokenSelect Style="width:200px; background: white; border:none;"
                                Tokens="@tickers"
                                @bind-Selected="@selectedTicker1" OnSelect="@OnSelectedItemChangedHandler1" />

                </div>
            </td>
        </tr>
        <tr>
            <td align="center">
                <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Secondary" 
                    OnClick="@DoSwapTicker"
                    aria-label="add to favorite"></MudIconButton>
            </td>
            <td align="right"></td>
        </tr>
        <tr>
            <td>To</td>
            <td>Balance: @($"{balance2:N8}")</td>
        </tr>
        <tr>
            <td>
                <div class="round">
                    <MudNumericField T="decimal" Style="width: 100px; background: white; border:none;" lang="en-us" DecimalsSeparator="."
                                 @bind-Value="@amount2" />
                </div>
            </td>
            <td>
                <div class="round">
                            <TokenSelect Style="width:200px; background: white; border:none;"
                                Tokens="@tickers"
                                @bind-Selected="@selectedTicker2" OnSelect="@OnSelectedItemChangedHandler2" />
                </div>
            </td>
        </tr>

        @if (haspoolinfo && dispswap)
        {
            <tr style="height: 10px">
                <td colspan="2"></td>
            </tr>
            <tr>
                <td>Estimated Price</td>
                <td>@calprice</td>
            </tr>
            <tr>
                <td>You will sell</td>
                <td>@calsell</td>
            </tr>
            <tr>
                <td>You will get</td>
                <td>@calget</td>
            </tr>
            <tr>
                <td>Price Impact</td>
                <td>@calimpact</td>
            </tr>
            <tr>
                <td>Pool Fee</td>
                <td>@calprofee</td>
            </tr>
            <tr>
                <td>Network Fee</td>
                <td>@calnodfee</td>
            </tr>
        }

        <tr style="height: 10px">
            <td colspan="2"></td>
        </tr>
        <tr>

            <td colspan="2">
                @if (walletState.Value.wallet == null)
                {
                    <a href="/wallet">
                    <MudButton FullWidth="true" Color="Color.Primary" class="rounded-pill">
                        <Icon Name="IconName.Unlock" />
                        Open Wallet
                    </MudButton>
                    </a>
                }
                else
                {
                    <MudButton FullWidth="true" Disabled="@(!canswap)" Color="Color.Primary" OnClick="@DoSwap" class="rounded-pill">
                        <Icon Name="IconName.SyncAlt" />                        
                        @if (swapping)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                            <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                            <MudText>Swap</MudText>
                        }
                    </MudButton>
                }


            </td>
        </tr>

        @if (haspoolinfo)
        {
            <tr style="height: 10px">
                <td colspan="2"></td>
            </tr>
            <tr>
                <td>Token Pair</td>
                <td>@pairinfo</td>
            </tr>
            <tr>
                <td>Total Liquidate</td>
                <td>@pairliquid</td>
            </tr>

            <tr>
                <td>Your Share</td>
                <td>@pairshare</td>
            </tr>
        }
        else
        {
            <tr>
                <td colspan="2">Please select a token pair</td>
            </tr>

        }


    </table>

</div>

@code {
    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    [Inject] ISnackbar Snackbar { get; set; }
    double intervalBeforeMsgClose = 2000;

    bool busy;

    private decimal _amount1;
    public decimal amount1
    {
        get
        {
            return _amount1;
        }
        set
        {
            if (_amount1 != value)
            {
                _amount1 = value;
                updateBtn1(_amount1);
            }
            else
                _amount1 = value;
        }
    }

    private decimal _amount2;
    public decimal amount2
    {
        get
        {
            return _amount2;
        }
        set
        {
            if (_amount2 != value)
            {
                _amount2 = value;
                updateBtn2(_amount2);
            }
            else
                _amount2 = value;
        }
    }

    decimal balance1, balance2;
    List<Ticker> tickers;
    Ticker selectedTicker1;
    Ticker selectedTicker2;

    RenderFragment pairinfo, pairliquid, pairshare;
    bool haspoolinfo = false;
    bool dispswap, canswap;
    bool swapping;

    RenderFragment calprice, calsell, calget, calimpact, calprofee, calnodfee;

    string token0, token1;
    TransactionBlock poollatest;
    decimal price;
    decimal minrecv;
    decimal lyraprice;

    private void DoSwapTicker()
    {
        (selectedTicker1, selectedTicker2) = (selectedTicker2, selectedTicker1);
        (amount1, amount2) = (amount2, amount1);
        UpdateBalance();
        updateBtn1(amount1);
    }

    private string GN(string dbname)
    {
        return dbname.Replace("tether/", "$");
    }

    private async Task DoSwap()
    {
        swapping = true;
        busy = true;
        var result = await walletState.Value.wallet.SwapTokenAsync(token0, token1,
            selectedTicker1.dbname, amount1, minrecv);

        if (result.Successful())
        {
            Snackbar.Add("Token Swap Success! Waiting for pool updating...", Severity.Success);
            await Task.Delay(3000);

            Snackbar.Add("Refresh pool and wallet...", Severity.Info);
            await walletState.Value.wallet.SyncAsync(null);

            var lc = LyraRestClient.Create(_config["network"], Environment.OSVersion.ToString(), "Nebula", "1.4");
            var existspool = await lc.GetPoolAsync(selectedTicker1.dbname, selectedTicker2.dbname);
            if (existspool.Successful())
            {
                Snackbar.Add("Updated.", Severity.Success);
            
                poollatest = existspool.GetBlock() as TransactionBlock;
                token0 = existspool.Token0;
                token1 = existspool.Token1;
                CreatePoolInfo(poollatest);
            }
            else
            {
                Snackbar.Add($" Pool refresh failed: {existspool.ResultCode}", Severity.Error);
            }

            updateBtn1(amount1);
            UpdateBalance();

            swapping = false;
        }
        else
            Snackbar.Add($"Error Swap Token: {result.ResultCode}", Severity.Error);

        swapping = false;
        busy = false;
    }

    private void updateBtn1(decimal? a)
    {
        if (selectedTicker1 != null && poollatest != null && amount1 > 0 && token0 != null)
        {
            var swapcal = new SwapCalculator(token0, token1, poollatest,
                selectedTicker1.dbname, amount1, 0);
            _amount2 = swapcal.MinimumReceived;
            amount2 = swapcal.MinimumReceived;

            dispswap = amount1 > 0;
            canswap = amount1 > 0 && amount1 <= balance1
            && selectedTicker1 != null && selectedTicker2 != null
                && selectedTicker1 != selectedTicker2;

            updateBtn(amount1);
        }
        else
        {
            canswap = false;
        }
    }

    private void updateBtn2(decimal? a)
    {
        if (selectedTicker2 != null && poollatest != null && amount2 > 0 && token0 != null)
        {
            var swapcal = new SwapCalculator(token0, token1, poollatest,
                selectedTicker2.dbname, amount2, 0);

            _amount1 = swapcal.MinimumReceived;
            amount1 = swapcal.MinimumReceived;

            dispswap = amount2 > 0;
            canswap = amount2 > 0 && amount2 < balance2
                && selectedTicker1 != null && selectedTicker2 != null
                && selectedTicker1 != selectedTicker2;

            updateBtn(amount2);
        }
        else
        {
            canswap = false;
        }
    }
    private void updateBtn(decimal a)
    {
        if (selectedTicker1 != null && dispswap && amount1 > 0 && token0 != null)
        {
            var fromticker = selectedTicker1;
            var swapcal = new SwapCalculator(token0, token1, poollatest,
                fromticker.dbname, amount1, 0);
            var sell = $"{amount1} {fromticker}";
            calsell =
    @<div>@sell</div>
    ;

            price = swapcal.Price;
            var pricestr = $"{Math.Round(price, 8)} {selectedTicker1} per {selectedTicker2}";
            calprice =
    @<div>@pricestr</div>
    ;

            minrecv = swapcal.MinimumReceived;
            var minget = $"{swapcal.MinimumReceived} {selectedTicker2}";
            calget =
    @<div>@minget</div>
    ;

            var imp = $"{swapcal.PriceImpact * 100} %";
            calimpact =
    @<div>@imp</div>
    ;

            var feen = $"{swapcal.PayToAuthorizer} LYR";
            var feep = $"{swapcal.PayToProvider} {fromticker}";
            calnodfee =
    @<div>@feen</div>
    ;
            calprofee =
    @<div>@feep</div>
    ;
        }
    }

    private void OnSelectedItemChangedHandler1()
    {
        UpdateBalance();
        ChangePool();
    }
    private void OnSelectedItemChangedHandler2()
    {
        UpdateBalance();
        ChangePool();
    }

    private void ChangePool()
    {
        if (selectedTicker1 != null && selectedTicker2 != null && selectedTicker1 != selectedTicker2)
        {
            busy = true;
            _ = Task.Run(async () =>
            {
                var lc = LyraRestClient.Create(_config["network"], Environment.OSVersion.ToString(), "Nebula", "1.4");

                try
                {
                    var existspool = await lc.GetPoolAsync(selectedTicker1.dbname, selectedTicker2.dbname);
                    if (existspool.Successful())
                    {
                        poollatest = existspool.GetBlock() as TransactionBlock;
                        token0 = existspool.Token0;
                        token1 = existspool.Token1;
                    }
                    else
                    {
                        poollatest = null;
                        token0 = null;
                        token1 = null;
                    }

                    CreatePoolInfo(poollatest);

                    updateBtn1(amount1);
                    UpdateBalance();

                }
                catch (Exception ex)
                {

                }
                finally
                {
                    busy = false;
                    await InvokeAsync(() => StateHasChanged());

                }

            });
        }
        else
            haspoolinfo = false;

    }

    private void UpdateBalance()
    {
        if (walletState.Value.wallet != null)
        {
            var blk = walletState.Value.wallet.GetLatestBlock();

            if (selectedTicker1 != null)
                if (blk != null && blk.Balances.ContainsKey(selectedTicker1.dbname))
                    balance1 = blk.Balances[selectedTicker1.dbname].ToBalanceDecimal();
                else
                    balance1 = 0;

            if (selectedTicker2 != null)
                if (blk != null && blk.Balances.ContainsKey(selectedTicker2.dbname))
                    balance2 = blk.Balances[selectedTicker2.dbname].ToBalanceDecimal();
                else
                    balance2 = 0;

            Dispatcher.Dispatch(new WebWalletRefreshBalanceAction { wallet = walletState.Value.wallet });
        }

        //InvokeAsync(() => StateHasChanged());
    }



    private async Task OpenSwapUI()
    {
        busy = true;
        var lc = LyraRestClient.Create(_config["network"], Environment.OSVersion.ToString(), "Nebula", "1.4");

        // for api sign only
        var pk = "n4uh7o2kAerPZQSNBRirzA3pSUBEuEhs6r7oRwpV6Dgbs3FvY";
        var pub = "LBRzScs8NwMcr7U8i9a8sSWETseWf3TLge4CVJy6as24hSB4hwtZ5jKTbHJdoVZBJiNC2LpjN9MQB719Py9YxXo2xpLxnS";

        var lsbret = await lc.GetLastServiceBlockAsync();

        var sign = Signatures.GetSignature(pk, (lsbret.GetBlock() as ServiceBlock).Hash, pub);
        var tokens = await lc.GetTokenNamesAsync(pub, sign, "(null)");

        tickers = tokens.Entities
            .Where(a => !a.StartsWith("unittest/"))
            .Select(a => new Ticker
                {
                    dbname = a,
                    Name = a.Replace("tether/", "$")
                })
            .OrderBy(a => a.Name)
            .ToList();
        tickers.Insert(0, new Ticker { dbname = "LYR", Name = "LYR" });

        ICoinGeckoClient _client = CoinGeckoClient.Instance;
        const string vsCurrencies = "usd";
        var prices = await _client.SimpleClient.GetSimplePrice(new[] { "lyra" }, new[] { vsCurrencies });
        lyraprice = (decimal)prices["lyra"]["usd"];
        busy = false;
    }

    protected override async Task OnInitializedAsync()
    {
        //this.ObserveParameter<decimal>(nameof(this.amount1))
        //    .TakeUntil(Disposed) //you could even move this to the base class
        //    .Subscribe();

        await base.OnInitializedAsync();

        if (walletState.Value.wallet != null)
            await walletState.Value.wallet.SyncAsync(null);
        await OpenSwapUI();
    }


    private void CreatePoolInfo(TransactionBlock platest)
    {
        if (platest != null)
        {
            var info = $"{GN(token0)} vs {GN(token1)}";
            pairinfo =
    @<div>@info</div>
    ;

            if (platest.Balances.ContainsKey(token0))
            {
                var line1 = $"{platest.Balances[token0].ToBalanceDecimal()} {GN(token0)}";
                var line2 = $"{platest.Balances[token1].ToBalanceDecimal()} {GN(token1)}";
                pairliquid =
    @<div>
        <div>@line1</div>
        <div>@line2</div>
    </div>
    ;
            }
            else
            {
                pairliquid =
    @<div>No Liquidate in Pool</div>
    ;
            }
        }
        else
        {
            pairinfo =
    @<div>No pool for selected token pair.</div>
    ;

            pairliquid =
    @<div>No Liquidate in Pool</div>
    ;
        }


        var pool = platest as IPool;
        if (pool != null && walletState.Value.wallet != null)
        {
            if (pool.Shares.ContainsKey(walletState.Value.wallet.AccountId))
            {
                var shareinfo = $"{Math.Round(pool.Shares[walletState.Value.wallet.AccountId].ToRitoDecimal() * 100, 4)} %";
                pairshare =
    @<div>@shareinfo</div>
    ;
            }
            else
            {
                pairshare =
    @<div>No Share in Pool</div>
    ;
            }
        }
        else
        {
            pairshare =
    @<div>No Share in Pool</div>
    ;
        }

    ;

        haspoolinfo = platest != null;
    }
}
