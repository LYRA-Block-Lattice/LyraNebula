@namespace UserLibrary.Components
@using AntDesign
@using Blazored.LocalStorage
@using DexServer.Ext
@using System.ComponentModel
@using AntDesign.TableModels
@using Fluxor
@using Lyra.Core.API
@using Lyra.Core.Accounts
@using Lyra.Core.Blocks
@using Lyra.Data.API
@using Lyra.Data.Crypto
@using Lyra.Shared
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Configuration
@using Nebula.Data
@using Nebula.Store.WebWalletUseCase
@using UserLibrary.Data
@inject IConfiguration Configuration
@inject ModalService _modalService
@inject MessageService _message

<div class="flex-container">
    @if (ui == UI.entry)
    {
        <div class="mid">
            <InputPassword @bind-Value="@txtValue1" Placeholder="Password" Size="@InputSize.Large" OnPressEnter="(e)=>Submit(e, txtValue1)" />
        </div>
        <div class="mid">
            <InputPassword @bind-Value="@txtValue2" Placeholder="Repeat Password" Size="@InputSize.Large" OnPressEnter="(e)=>Submit(e, txtValue2)" />
        </div>
        <div class="mid">
            <Input TValue="string" Placeholder="Private Key" @bind-Value="@prvKey" />
        </div>
        @if(hasStore)
        {
            <div class="mid">
                <Checkbox @bind-Checked="@confirmdelete" OnChange="@DoAlert">
                    Confirm delete existing wallet
                </Checkbox>
            </div>            
        }
        <div class="mid">
            <Button Type="@ButtonType.Primary"
                OnClick="@(async ()=>{ await RestoreWallet(); })">
                Restore Wallet
            </Button>
        </div>
        <div class="mid">
            <Divider Style="width: 0px; height: 0px" />
        </div>
        <div class="mid">
        <a href="/login"><Button Type="@ButtonType.Link">@act with password</Button></a>
        </div>
    }

    @if (ui == UI.success)
    {
        <div class="mid">
            <Result Icon="smile-outline"
                Status="success"
                Title="Your wallet has been created"
                Extra=@extraok />
        </div>
    }

</div>

<Styled>
    .custom-password-icon {
    color: rgba(0,0,0,.45);
    cursor: pointer;
    transition: all .3s;
    }

    .flex-container {
    display:flex;
    flex-direction: column;
    gap: 20px;
    justify-content:center;
    align-items:center;
    height: 100%;
    width: 100%;
    }

    .mid {
    align-self: center;
    }

    .bot {
    align-self: flex-end;
    }

</Styled>

@code {
    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    [Inject]
    public ILocalStorageService _localStorage { get; set; }

    [Parameter]
    public EventCallback OnFinished { get; set; }

    enum UI { entry, success, failed }
    UI ui = UI.entry;

    string act = "Create new";
    string prvKey;

    string title = "BasicModal";
    bool _visible = false;

    bool confirmdelete = false;

    RenderFragment extraok =
    @<a href="login">
        <Button Type="primary">
            Login
        </Button>
    </a>;

    RenderFragment extrafail =
    @<Button Type="primary">
        Retry
    </Button>;

    RenderFragment actionSetting(Func<Task> clickActionAsync, Dictionary<string, object> iconAttributes) =>
    @<Icon @attributes="@iconAttributes" OnClick="@clickActionAsync" />
    ;

    private string txtValue1 { get; set; }
    private string txtValue2 { get; set; }
    private bool visible = false;
    private InputPassword _inputPassword;

    Dictionary<string, object> hideAttributes = new()
        {
            ["Type"] = "eye-invisible",
            ["Style"] = ""
        };

    Dictionary<string, object> showAttributes = new()
        {
            ["Type"] = "eye",
            ["Style"] = "color: #1890ff"
        };

    Dictionary<string, object> attributes = new()
        {
            ["Class"] = "custom-password-icon",
            ["Type"] = "eye-invisible",
            ["Theme"] = "outline"
        };

    private void Submit(KeyboardEventArgs args, string password)
    {
        Console.WriteLine($"password: {password}");
    }

    private async Task OnClick()
    {
        Console.WriteLine("Custom icon clicked");
        visible = !visible;
        if (visible)
            attributes = showAttributes;
        else
            attributes = hideAttributes;
        await _inputPassword.Focus();
    }

    bool hasStore;

    protected async override Task OnInitializedAsync()
    {
        var storeName = "nebstor";

        if (await _localStorage.ContainKeyAsync(storeName))
        {
            hasStore = true;
            act = "Open existing wallet";
        }        
        else
        {
            hasStore = false;
            act = "Create new";
        }
        

        await base.OnInitializedAsync();
    }

    Func<ModalClosingEventArgs, Task> onOk = (e) =>
    {
        var storeName = "nebstor";
        //Dispatcher.Dispatch(new WebWalletRestoreAction
        //        {
        //            store = storeName,
        //            name = "default",
        //            password = txtValue1,
        //            privateKey = prvKey
        //        });
        //OnFinished.InvokeAsync();
        e.Cancel = false;
        return Task.CompletedTask;
    };
    Func<ModalClosingEventArgs, Task> onCancel = (e) =>
    {
        Console.WriteLine("Cancel");
        return Task.CompletedTask;
    };
    RenderFragment icon = 
    @<Icon Type="exclamation-circle" Theme="outline"></Icon>
    ;

    private async Task RestoreWallet()
    {
        if (txtValue1 == txtValue2)
        {
            if(!Signatures.ValidatePrivateKey(prvKey))
            {
                _message.Error("Invalid private key.");
                return;
            }
            // warn if wallet exists
            if (hasStore && !confirmdelete)
            {
                return;
            }
            else
            {
                var storeName = "nebstor";
                Dispatcher.Dispatch(new WebWalletRestoreAction
                    {
                        store = storeName,
                        name = "default",
                        password = txtValue1,
                        privateKey = prvKey
                    });
                await Task.Delay(2000);
                OnFinished.InvokeAsync();
            }
        }

        else
        {
            _message.Error("Passwords not match.");
        }
    }

    private void DoAlert(bool ck)
    {
        if(ck)
        {
            _message.Error("Your current wallet will be overwritten!!! Please make sure you want to do this.");
        }
    }
}
