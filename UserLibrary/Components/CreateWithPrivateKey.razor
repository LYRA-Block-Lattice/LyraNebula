@namespace UserLibrary.Components
@using Blazored.LocalStorage
@using DexServer.Ext
@using System.ComponentModel
@using Fluxor
@using Lyra.Core.API
@using Lyra.Core.Accounts
@using Lyra.Core.Blocks
@using Lyra.Data.API
@using Lyra.Data.Crypto
@using Lyra.Shared
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Configuration
@using Nebula.Data
@using Nebula.Store.WebWalletUseCase
@using UserLibrary.Data
@inject IConfiguration Configuration

@if (busy)
{
    <div style="z-index: 5;" class="spinner"></div>
}

<div class="flex-container">
    @if (ui == UI.entry)
    {
        <div class="mid">
            <TextEdit Role="TextRole.Password" Placeholder="Password" Size="Size.Large" @bind-Text="@txtValue1" />
        </div>
        <div class="mid">
            <TextEdit Role="TextRole.Password" Placeholder="Confirm Password" Size="Size.Large" @bind-Text="@txtValue2" />
        </div>
        <div class="mid">
            <TextEdit Size="Size.Large" Placeholder="Private Key" @bind-Text="@prvKey" />
        </div>
        @if(hasStore)
        {
            <div class="mid">
                <Check TValue="bool" @bind-Checked="@confirmdelete">Confirm delete existing wallet</Check>
            </div>            
        }
        <div class="mid">
            <Button Color="Color.Primary" Loading="@busy" Clicked="@RestoreWallet">Restore Wallet</Button>
        </div>
        <div class="mid">
            <Divider Style="width: 0px; height: 0px" />
        </div>
        <div class="mid">
        <a href="/login">
            <Button>@act with password</Button></a>
        </div>
    }

    @if (ui == UI.success)
    {
        <div class="mid">
            <Result Icon="smile-outline"
                Status="success"
                Title="Your wallet has been created"
                Extra=@extraok />
        </div>
    }

</div>

@code {
    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    [Inject]
    public ILocalStorageService _localStorage { get; set; }

    [Inject] IMessageService MessageService { get; set; }

    [Parameter]
    public EventCallback OnFinished { get; set; }

    bool busy;

    enum UI { entry, success, failed }
    UI ui = UI.entry;

    string act = "Create new";
    string prvKey;

    string title = "BasicModal";
    bool _visible = false;

    bool _confirmdelete = false;
    bool confirmdelete
    {
        get
        {
            return _confirmdelete;
        }
        set
        {
            _confirmdelete = value;
            DoAlert(_confirmdelete);
        }
    }

    RenderFragment extraok =
    @<a href="login">
        <Button Color="Color.Primary">Login</Button>
    </a>;

    RenderFragment extrafail =
    @<Button Color="Color.Primary">Retry</Button>
    ;

    private string txtValue1 { get; set; }
    private string txtValue2 { get; set; }
    private bool visible = false;
    bool hasStore;

    protected async override Task OnInitializedAsync()
    {
        var storeName = NebulaConsts.NebulaStorName;

        if (await _localStorage.ContainKeyAsync(storeName))
        {
            hasStore = true;
            act = "Open existing wallet";
        }        
        else
        {
            hasStore = false;
            act = "Create new";
        }


        await base.OnInitializedAsync();
    }

    private async Task RestoreWallet()
    {
        if (txtValue1 == txtValue2)
        {
            if(!Signatures.ValidatePrivateKey(prvKey))
            {
                await MessageService.Info( "Invalid private key.", "Notice" );
                return;
            }
            // warn if wallet exists
            if (hasStore && !confirmdelete)
            {
                return;
            }
            else
            {
                busy = true;
                var storeName = NebulaConsts.NebulaStorName;
                Dispatcher.Dispatch(new WebWalletRestoreAction
                    {
                        store = storeName,
                        name = "default",
                        password = txtValue1,
                        privateKey = prvKey
                    });
                await Task.Delay(2000);
                OnFinished.InvokeAsync();
            }
        }

        else
        {
            await MessageService.Info( "Passwords not match.", "Notice" );
        }
    }

    private void DoAlert(bool ck)
    {
        if(ck)
        {
            MessageService.Info( "Your current wallet will be overwritten!!! Please make sure you want to do this.", "Warnning" );
        }
    }
}
