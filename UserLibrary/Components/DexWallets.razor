@namespace UserLibrary.Components

@using Blazorise.DataGrid
@using Blazorise.Snackbar
@using DexServer.Ext
@using System.ComponentModel
@using Fluxor
@using Lyra.Core.API
@using Lyra.Core.Accounts
@using Lyra.Core.Blocks
@using Lyra.Data.API
@using Lyra.Data.Shared
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Configuration
@using Nebula.Data
@using Nebula.Store.WebWalletUseCase
@using UserLibrary.Data
@inject IConfiguration Configuration

<style>
    .ant-progress-circle-wrap,
    .ant-progress-line-wrap {
        margin-right: 8px;
        margin-bottom: 5px;
    }
</style>

@if(walletState.Value.wallet == null)
{
    
    <a href="/wallet"><Button Color="Color.Primary">Open Wallet</Button></a>
}
else
{

@if(tokens == null)
{
    <p><em>Loading wallets... This may take a while.</em></p>
    <div class="spinner"></div>
}
else
{
    <DataGrid TItem="WalletView" Data="@tokens" @bind-SelectedRow="@selectedrow" Responsive>
    <DataGridColumn TItem="WalletView" Field="Name">
        <DisplayTemplate>
            <a href="@context.Url">@context.Name</a>
        </DisplayTemplate>        
    </DataGridColumn>
    <DataGridColumn TItem="WalletView" Field="Symbol" />
    <DataGridColumn Caption="Network Provider" TItem="WalletView" Field="NetworkProvider" />
    <DataGridColumn Caption="My Balance" TItem="WalletView" Field="MyBalance" />
    <DataGridColumn TItem="WalletView" Caption="Transfer">
        <DisplayTemplate>
             <Icon Name="@("fa-caret-square-left")" IconSize="IconSize.x2"
                Clicked="@(async ()=>{ await OnTransferClick(context, false); })" />
             <Icon Name="@("fa-caret-square-right")" IconSize="IconSize.x2"
                Clicked="@(async ()=>{ await OnTransferClick(context, true); })" />
        </DisplayTemplate>        
    </DataGridColumn>  
    <DataGridColumn Caption="DEX Balance" TItem="WalletView" Field="DexBalance" />
    <DataGridColumn TItem="WalletView" Caption="Action">
        <DisplayTemplate>
            <Button Color="Color.Primary" Clicked="@(()=>{ OnDepositClick(context); })">
                    Deposit
            </Button>
            <Button Color="Color.Primary" Clicked="@(()=>{ OnWithdrawClick(context); })">
                    Withdraw
            </Button>
        </DisplayTemplate>        
    </DataGridColumn> 
</DataGrid>
<div>
    <Button Color="Color.Primary" Clicked="@RefreshAllWallets">Refresh All Balance</Button>
</div>

@*Transfer Dialog*@
<Modal Visible="@transferVisible">
       <ModalContent>
           <ModalHeader>
               <ModalTitle>@transferTitle</ModalTitle>
           </ModalHeader>
           <ModalBody>
               <h3>Amount you want to transfer:</h3>
               <NumericEdit TValue="decimal?" Style="background: white; font-size:large;" 
                    Min="@transferMin" Max="@transferMax"
                    ValueChanged="@((e) => {transferAmount = e.Value;})" />
               &nbsp;@symbol
           </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HandleCancel2">Close</Button>
                <Button Color="Color.Primary" Clicked="@HandleOk2">Transfer</Button>
            </ModalFooter>
       </ModalContent>
</Modal>

@*Depositon Dialog*@
<Modal Visible="@visible">
       <ModalContent>
           <ModalHeader>
               <ModalTitle>@title</ModalTitle>
           </ModalHeader>
           <ModalBody>
                   <h3><b>@symbol</b></h3>
    <p>Provider: @provider</p>
    <p>Contract: @contract</p>
    <p>Depositon Address: </p>
    <p style="width:100%">
        <CopyToClipboard Text="@address" />
    </p>
    <p>&nbsp;</p>
    <p>Minimal Deposit: @mindep @symbol</p>
    <p>Deposition Fee: @depfee @symbol</p>
    <p>Confirmation: @token?.ConfirmationInfo</p>
    @if(crwalletshow)
            {
                        <div>
        <Progress Value="@crwalletprogress" />
    </div>
            }
           </ModalBody>
            <ModalFooter>
                <Button Color="Color.Primary" Clicked="@HandleOk">Close</Button>
            </ModalFooter>
       </ModalContent>
</Modal>
   
@*Withdraw Dialog*@
<Modal Visible="@withdrawVisible">
       <ModalContent>
           <ModalHeader>
               <ModalTitle>@withdrawTitle</ModalTitle>
           </ModalHeader>
           <ModalBody>
                <h3><b>@symbol</b></h3>
                <p>Provider: @provider</p>
                <p>Contract: @contract</p>
                <p>Withdraw Fee: @wdrfee @symbol</p>
                <p>&nbsp;</p>
               <h3>Address you want to withdraw:</h3>
               <TextEdit Placeholder="Withdraw to address" @bind-Text="@withdrawAddress" />
               <h3>Amount:</h3>
                      <NumericEdit TValue="decimal?" Style="background: white; font-size:large;" 
                    Min="@withdrawMin" Max="@withdrawMax"
                    ValueChanged="@((e) => {withdrawAmount = e.Value;})" />

               &nbsp;@symbol
           </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HandleCancel3">Close</Button>
                <Button Color="Color.Primary" Clicked="@StartWithdraw">Withdraw</Button>
            </ModalFooter>
       </ModalContent>
</Modal>

}

}

<SnackbarStack @ref="snackbarStack" Location="SnackbarStackLocation.Right" />


@code {

    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    [CascadingParameter]
    public Error Err { get; set; }

    SnackbarStack snackbarStack;
    double intervalBeforeMsgClose = 2000;

    WalletView selectedrow;

    string withdrawTitle;
    bool withdrawVisible = false;
    string withdrawAddress;
    decimal withdrawAmount;
    decimal withdrawMin, withdrawMax, withdrawDefault;

    int crwalletprogress;
    bool crwalletshow;

    List<WalletView> tokens;
    WalletView token;
    string address;

    string title = "BasicModal";
    bool visible = false;
    string symbol;
    string provider;
    string contract;
    decimal mindep;
    string confirm;
    decimal depfee, wdrfee;

    string dexWalletId = null;
    string ticker = null;
    bool transferVisible = false;
    string transferTitle;
    decimal transferAmount;
    decimal transferMin = 1;
    decimal transferMax;
    decimal transferDefault;
    bool transferToDex;
    bool _confirmLoading = false;

    async Task OnTransferClick(WalletView row, bool toDex)
    {
        try
        {
            if(row.DexWalletID == null)
            {
                // user have not create wallet yet.
                await snackbarStack.PushAsync("Creating a DEX wallet for you", SnackbarColor.Info);

                var wallet = walletState.Value.wallet;
                await wallet.SyncAsync(null);
                var crdexret = await wallet.CreateDexWalletAsync(row.Symbol, row.NetworkProvider);
                if(crdexret.Successful())
                {
                    await snackbarStack.PushAsync($"DEX Wallet for {row.Symbol} has been created. Refreshing...", SnackbarColor.Success);

                    await RefreshAllWallets();

                    await snackbarStack.PushAsync($"Refreshed.", SnackbarColor.Success);
                }
                else
                {
                    await snackbarStack.PushAsync($"DEX Wallet for {row.Symbol} was not created.", SnackbarColor.Warning);
                }
            }
            else
            {
                symbol = row.Symbol;
                transferTitle = toDex ? "Transfer funds from my wallet to DEX wallet" : "Transfer funds from DEX wallet to my wallet";
                transferMax = toDex ? row.MyBalance : row.DexBalance;
                transferDefault = toDex ? row.MyBalance : row.DexBalance;  
                transferAmount = toDex ? row.MyBalance : row.DexBalance;
                transferToDex = toDex;
                dexWalletId = row.DexWalletID;
                ticker = $"tether/{row.Symbol}";
                transferVisible = true;
            }

        }
        catch(Exception ex)
        {
            Err.ProcessError(ex);

        }

    }

    void OnDepositClick(WalletView row)
    {
        token = row;

        title = "Deposit funds for " + token.Name;
        symbol = token.Symbol;
        provider = token.NetworkProvider;
        contract = token.Contract.Shorten();
        address = token.Address;
        mindep = token.MinDeposit;
        confirm = token.ConfirmationInfo;
        depfee = token.DepositFee;
        wdrfee = token.WithdrawFee;

        if(string.IsNullOrWhiteSpace(token.Address))
        {
            crwalletprogress = 0;
            crwalletshow = true;
            StateHasChanged();
            if(walletState.Value.wallet != null && walletState.Value.wallet.BaseBalance >= 11m)
            {
                Task.Run(async () =>
                    {
                        crwalletprogress = 10;
                        await InvokeAsync(() => StateHasChanged());

                        var wallet = walletState.Value.wallet;
                        var ret = await wallet.CreateDexWalletAsync(symbol, provider);
                        if (ret.Successful())
                        {
                            crwalletprogress = 30;
                            await InvokeAsync(() => StateHasChanged());

                            for (var i = 30; i < 100; i++)
                            {
                                var dw = await wallet.FindDexWalletAsync(wallet.AccountId, symbol, provider);

                                if (dw == null)
                                {
                                    crwalletprogress = i;
                                    await InvokeAsync(() => StateHasChanged());   

                                    await Task.Delay(500);
                                    continue;
                                }

                                token.Address = dw.ExtAddress;
                                address = token.Address;

                                crwalletprogress = 100;

                                await InvokeAsync(() => StateHasChanged());   

                                break;
                            }
                        }
                        else
                        {
                            crwalletprogress = 0;
                        }
                        await InvokeAsync(() => StateHasChanged());
                    });
            }
            else
            {
                snackbarStack.PushAsync($"You need at least 11 LYR to create a DEX wallet.", SnackbarColor.Danger);
                return;
            }         
        }
        else
        {
            crwalletshow = false;
        }        
        visible = true; 
    }

    void OnWithdrawClick(WalletView row)
    {
        token = row;
        if(!string.IsNullOrWhiteSpace(token.Address)         
            && walletState.Value.wallet != null
            && walletState.Value.wallet.BaseBalance >= 1m
            && row.DexWalletID != null
            && row.DexBalance > 0
            )
        {
            withdrawTitle = $"Withdraw {row.Symbol} to your address on {row.Name} {row.NetworkProvider}";
            dexWalletId = row.DexWalletID;
            provider = row.NetworkProvider;
            symbol = row.Symbol;
            contract = row.Contract;
            withdrawMin = row.MinWithdraw;
            withdrawMax = row.DexBalance;
            withdrawDefault = withdrawMax;
            withdrawAmount = withdrawMax;
            withdrawAddress = "";

            depfee = row.DepositFee;
            wdrfee = row.WithdrawFee;

            withdrawVisible = true;
        }
        else
        {
            snackbarStack.PushAsync($"No Token found.", SnackbarColor.Danger);
        }
    }

    private async Task StartWithdraw()
    {
        withdrawVisible = false;

        StateHasChanged();

        var wallet = walletState.Value.wallet;
        var wdwret = await wallet.DexWithdrawTokenAsync(dexWalletId, withdrawAddress, withdrawAmount);
        await snackbarStack.PushAsync(wdwret.ResultCode.ToString(), wdwret.Successful() ? SnackbarColor.Success : SnackbarColor.Danger);

        if(wdwret.Successful())
        {
            var wv = tokens.First(a => a.DexWalletID == dexWalletId);
            wv.DexBalance -= withdrawAmount;
        }

        StateHasChanged();
    }

    private void HandleCancel3()
    {
        withdrawVisible = false;
    }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            if(walletState.Value.wallet != null)
                await RefreshAllWallets();
        }
        catch(Exception e)
        {
            Console.WriteLine("Error DexWallet OnInitializedAsync " + e.ToString());
        }

        //StateHasChanged();
    }

    private async Task RefreshAllWallets()
    {
        var dc = new DexClient(Configuration["network"]);
        var ext = await dc.GetSupportedExtTokenAsync(Configuration["network"]);
        //_tokens = ext.Asserts;

        var wallet = walletState.Value.wallet;
        //var lc = LyraRestClient.Create(Configuration["network"], Environment.OSVersion.ToString(), "Nebula", "1.4");
        var brks = await wallet.GetAllDexWalletsAsync(wallet.AccountId);
        await wallet.SyncAsync(null);

        tokens = new List<WalletView>();
        foreach (var ast in ext.Asserts)
        {
            var wv = new WalletView
                {
                    Name = ast.Name,
                    Symbol = ast.Symbol,
                    NetworkProvider = ast.NetworkProvider,
                    Contract = ast.Contract,
                    MinDeposit = ast.MinDeposit,
                    ConfirmationInfo = ast.ConfirmationInfo,
                    DepositFee = ast.DepositFee,
                    WithdrawFee = ast.WithdrawFee,
                    MinWithdraw = ast.MinWithdraw,
                    DailyWithdrawLimit = ast.DailyWithdrawLimit,
                };
            var bt = brks.FirstOrDefault(a => a.ExtSymbol == ast.Symbol) as TransactionBlock;
            var key = $"tether/{ast.Symbol}";
            if (bt != null)
            {
                if (bt.Balances.ContainsKey(key))
                    wv.DexBalance = bt.Balances[key].ToBalanceDecimal();
                else
                    wv.DexBalance = 0;
                wv.Address = (bt as IDexWallet).ExtAddress;
                wv.DexWalletID = bt.AccountID;
            }
            else
                wv.DexBalance = 0;

            var lb = wallet.GetLatestBlock();
            if (lb != null && lb.Balances.ContainsKey(key))
            {
                wv.MyBalance = lb.Balances[key].ToBalanceDecimal();
            }
            else
                wv.MyBalance = 0;

            tokens.Add(wv);
        }
    }

    private void HandleOk()
    {
        visible = false;
    }

    private void HandleCancel()
    {
        visible = false;
    }

    private async Task HandleOk2()
    {
        _confirmLoading = true;
        transferVisible = false;
        StateHasChanged();

        if (transferAmount <= 0)
            return;

        var wallet = walletState.Value.wallet;
        APIResult ret = null;
        if(transferToDex)
        {
            await wallet.SyncAsync(null);
            ret = await wallet.DexPutTokenAsync(dexWalletId, ticker, transferAmount);
        }
        else
        {
            await wallet.SyncAsync(null);
            ret = await wallet.DexGetTokenAsync(dexWalletId, transferAmount);
        }

        _confirmLoading = false;        

        await snackbarStack.PushAsync(ret.ResultCode.ToString(), ret.Successful() ? SnackbarColor.Success : SnackbarColor.Danger);

        if(ret.Successful())
        {
            var wv = tokens.First(a => a.DexWalletID == dexWalletId);
            if(transferToDex)
            {
                wv.MyBalance -= transferAmount;
                wv.DexBalance += transferAmount;
            }
            else
            {
                wv.MyBalance += transferAmount;
                wv.DexBalance -= transferAmount;
            }
        }
    }

    private void HandleCancel2()
    {
        transferVisible = false;
    }
}
