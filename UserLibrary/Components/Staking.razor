@namespace UserLibrary.Components

@using Fluxor
@using Lyra.Core.Blocks
@using Lyra.Data.Blocks
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Nebula.Store.WebWalletUseCase

<MudTabs SelectedTab="@selectedTab1">
        <MudTabPanel Text="Staking Accounts">
            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Staking Amount</th>
                        <th>Compound Mode</th>
                        <th>Total Reward</th>
                        <th>Start Time</th>
                        <th>Staking Days</th>
                        <th>Staking to Account</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var stk in walletState.Value.brokerAccounts.Where(a => a is StakingGenesis)
                    .Cast<StakingGenesis>())
                    {
                        <tr>
                            <td>@stk.Name</td>
                            @if (walletState.Value.stkBalances != null)
                            {
                                <td>@walletState.Value.stkBalances[stk.AccountID]</td>
                            }
                            else
                            {
                                <td>0</td>
                            }
                            <td>@stk.CompoundMode</td>
                            <td>@walletState.Value.stkRewards[stk.AccountID]</td>
                            <td>@stk.TimeStamp</td>
                            <td>@stk.Days</td>
                            <td>@stk.Voting</td>
                            <td>
                                <a href="" @onclick="@((e) => AddStkAsync(e, stk.AccountID))" @onclick:preventDefault><u>Add Staking</u></a>
                                &nbsp;
                                <MudButton OnClick="@(async () => {await UnstakingConfirm(stk.AccountID);})">Unstaking</MudButton>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </MudTabPanel>
        <MudTabPanel Text="Profiting Accounts">
            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Share Ratio</th>
                        <th>Seats</th>
                        <th>Profiting Account ID</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var pft in walletState.Value.brokerAccounts.Where(a => a is ProfitingGenesis)
                    .Cast<ProfitingGenesis>())
                    {
                        <tr>
                            <td>@pft.Name</td>
                            <td>@pft.PType</td>
                            <td>@pft.ShareRito</td>
                            <td>@pft.Seats</td>
                            <td>
                                @pft.AccountID
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </MudTabPanel>
</MudTabs>

<MudDivider />

<MudTabs SelectedTab="@selectedTab2">
        <MudTabPanel Text="Create Staking Account">
            <p>
                Name:
                <MudTextField Label="Name" @bind-Value="@stkName" />
            </p>
            <p>
                Staking For Address:
                <MudTextField Label="Address" @bind-Value="@stkVoting" />
            </p>
            <p>
                Days of staking:
                <MudTextField Label="Days" @bind-Value="@stkDays" />
            </p>
            <p>
                Compound staking mode:
                <input size="10" type="checkbox" @bind="@stkCompound" />
            </p>
            <div>
                <button class="btn btn-primary" @onclick="StakingCreate">Create Staking</button>
            </div>
        </MudTabPanel>
        <MudTabPanel Text="Create Profiting Account">
            <p>
                Name:
                <MudTextField Label="Name" @bind-Value="@pftName" />
            </p>
            <p>
                Type:
                <select style="height: 40px; width: 380px" @bind="@pftType">
                    <option value="Node">Node</option>
                    <option disabled value="Oracle">Oracle</option>
                    <option disabled value="Merchant">Merchant</option>
                    <option value="Yield">Yield</option>
                </select>
            </p>
            <p>
                Ratio to share to staking (0% - 100%):
                <MudTextField Label="Ratio" @bind-Value="@pftShare" />
            </p>
            <p>
                Number of staking (0 - 100):
                <MudTextField Label="Max number" @bind-Value="@pftSeats" />
            </p>
            <div>
                <button class="btn btn-primary" @onclick="ProfitingCreate">Create Profiting Account</button>
            </div>
        </MudTabPanel>
</MudTabs>

@code {
    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    [Inject]
    private IJSRuntime JS { get; set; }

    [Inject] private IDialogService DialogService { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }

    string selectedTab1 = "staking";

    private Task OnSelectedTabChanged1( string name )
    {
        selectedTab1 = name;
        return Task.CompletedTask;
    }

    string selectedTab2 = "crstk";

    private Task OnSelectedTabChanged2( string name )
    {
        selectedTab2 = name;
        return Task.CompletedTask;
    }

    public string stkName { get; set; }
    public string stkVoting { get; set; }
    public string stkDays { get; set; }
    public bool stkCompound { get; set; }

    public string pftName { get; set; }
    public string pftType { get; set; } = "Node";
    public string pftShare { get; set; }
    public string pftSeats { get; set; }

    private async Task AddStkAsync(MouseEventArgs e, string stkid)
    {
        try
        {
            var amt = await GetAmountInput();
            if (amt > 0)
            {
                Dispatcher.Dispatch(new WebWalletAddStakingAction
                    {
                        wallet = walletState.Value.wallet,
                        stkid = stkid,
                        amount = amt
                    });
            }
        }
        catch (Exception ex)
        {
            Dispatcher.Dispatch(new WalletErrorResultAction { error = ex.Message });
        }
    }

    async Task UnstakingConfirm(string actid)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning", 
            "Unstaking within the promised staking period will pay 0.8% panalise fee. Are you sure you want to confirm?", 
            yesText:"Confirm!", cancelText:"Cancel");

        if (result.Value)
        {
            RmStk(actid);
        }
        else
        {
            Snackbar.Add("Nothing changed.", Severity.Normal);
        }
    }

    private void RmStk(string stkid)
    {
        try
        {
            Dispatcher.Dispatch(new WebWalletRemoveStakingAction
                {
                    wallet = walletState.Value.wallet,
                    stkid = stkid
                });
        }
        catch (Exception ex)
        {
            Dispatcher.Dispatch(new WalletErrorResultAction { error = ex.Message });
        }
    }

    private async Task<decimal> GetAmountInput()
    {
        string prompted = await JS.InvokeAsync<string>("prompt", "How many LYR do you want to stake?"); // Prompt
        if (prompted == null)
            return 0;
        return decimal.Parse(prompted);
    }

    private void StakingCreate(MouseEventArgs e)
    {
        try
        {
            Dispatcher.Dispatch(new WebWalletCreateStakingAction
                {
                    wallet = walletState.Value.wallet,
                    name = stkName,
                    voting = stkVoting,
                    days = int.Parse(stkDays),
                    compound = stkCompound
                });
        }
        catch (Exception ex)
        {
            Dispatcher.Dispatch(new WalletErrorResultAction { error = ex.Message });
        }
    }

    private void ProfitingCreate(MouseEventArgs e)
    {
        try
        {
            if (pftType != "Node" && pftType != "Yield")
                return;

            var type = (ProfitingType)Enum.Parse(typeof(ProfitingType), pftType);

            Dispatcher.Dispatch(new WebWalletCreateProfitingAction
                {
                    wallet = walletState.Value.wallet,
                    name = pftName,
                    type = type,
                    share = decimal.Parse(pftShare) / 100m,
                    seats = int.Parse(pftSeats)
                });
        }
        catch (Exception ex)
        {
            Dispatcher.Dispatch(new WalletErrorResultAction { error = ex.Message });
        }
    }
}
