@using Fluxor
@using Nebula.Store.WebWalletUseCase

<div>
    <h1>Hello, My new token!</h1>
    <MudText>Mint your own Token with just a few clicks.</MudText>
    <MudText>Note: Every token mint costs 10,000 LYR.</MudText>
</div>


<div>
    <p>
        <h3>Token Name</h3>
        <MudTextField @bind-Value="@name" Label="minimum 2 characters" />
    </p>
    <p>
        <h3>Domain</h3>
        <MudTextField @bind-Value="@domain" Label="minimum 6 characters" />
    </p>
    <p>
        <h3>Description</h3>
        <MudTextField @bind-Value="@desc" Label="optional" />
    </p>
    <p>
        <h3>Supply (maximum 90,000,000,000)</h3>
        <MudNumericField T="Int64"
                     @bind-Value="@supply"/>
    </p>
    <p>
        <h3>Precision (0 - 8)</h3>
        <MudNumericField T="Int64"
                     @bind-Value="@precision" />
    </p>
    <p>
        <h3>Owner</h3>
        <MudTextField @bind-Value="@owner" Label="optional" />
    </p>
    <p>
        <h3>Address</h3>
        <MudTextField @bind-Value="@address" Label="optional" />
    </p>
    <p>
        @if (walletState.Value.wallet == null)
        {
            <a href="wallet"><MudButton FullWidth="true" Color="Color.Primary">Open wallet to create token</MudButton></a>
        }
        else
        {
            <MudButton FullWidth="true" Color="Color.Primary" @ref="@btn"
                OnClick="@mint">
                @if (loading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Mint</MudText>
                }
            </MudButton>
        }

    </p>

    @if (success)
    {
        <p>
            <a href="wallet">View Your Coins</a>
        </p>
    }

    <p>@errmsg</p>
</div>


@code {
    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    string name, domain, desc, owner, address;
    Int64 supply, precision;
    MudButton btn;
    bool loading;
    string errmsg;
    bool success;

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task mint()
    {
        try
        {
            loading = true;
            var ret = await walletState.Value.wallet.CreateTokenAsync(
                name, domain, desc, (sbyte)precision, supply, true,
                owner, address, null, ContractTypes.Cryptocurrency, null
            );
            if (ret.Successful())
            {
                btn.Disabled = true;
                btn.ChildContent =
    @<Div>Success!</Div>
    ;
                success = true;
                errmsg = null;
            }
            else
            {
                success = false;
                errmsg = ret.ResultCode.ToString();
            }

        }
        catch (Exception ex)
        {
            errmsg = ex.ToString();
        }

        loading = false;
    }
}