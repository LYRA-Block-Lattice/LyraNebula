@namespace UserLibrary.Components

@using Fluxor
@using Lyra.Data.Crypto
@using Microsoft.Extensions.Configuration
@using Nebula.Store.WebWalletUseCase
@inject IConfiguration Configuration

@if(HavePool)
{
    <tr>
    <td colspan="2"><Divider>Pair Infomation</Divider></td>
</tr>
<tr>
    <td>Token Pair</td>
    <td>@pairinfo</td>
</tr>
<tr>
    <td>Total Liquidate</td>
    <td>@pairliquid</td>
</tr>
<tr>
    <td>Your Liquidate Share</td>
    <td>@pairshare</td>
    </tr>
}
else
{
    

}


@code {
    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    RenderFragment pairinfo, pairliquid, pairshare;

    public bool HavePool { get; set; }
    string _poolid;
    [Parameter]
    public string PoolId
    {
        get { return _poolid; }
        set
        {
            _poolid = value;
            var t = Task.Run(async () =>
            {
                await UpdatePool();
            });
            Task.WaitAll(t);
        }
    }

    private async Task UpdatePool()
    {
        if (_poolid != null)
        {
            HavePool = true;

            var lc = LyraRestClient.Create(Configuration["network"], Environment.OSVersion.ToString(), "Nebula", "1.4");
            var poolret = await lc.GetBlockByIndexAsync(_poolid, 1);
            var existspool = poolret.GetBlock() as PoolGenesisBlock;


            var info = $"{existspool.Token0} vs {existspool.Token1}";
            pairinfo =
    @<p>@info</p>
    ;
            var latestret = await lc.GetLastBlockAsync(_poolid);
            if (latestret.Successful())
            {
                var latestblk = latestret.GetBlock() as TransactionBlock;
                var poolblk = latestblk;

                var line1 = $"{latestblk.Balances[existspool.Token0].ToBalanceDecimal()} {existspool.Token0}";
                var line2 = $"{latestblk.Balances[existspool.Token1].ToBalanceDecimal()} {existspool.Token1}";
                pairliquid =
    @<p>
        @line1<br />
        @line2
    </p>
    ;
                var pool = latestblk as IPool;
                if (pool.Shares.ContainsKey(walletState.Value.wallet.AccountId))
                {
                    var shareinfo = $"{pool.Shares[walletState.Value.wallet.AccountId].ToRitoDecimal() * 100} %";
                    pairshare =
    @<p>@shareinfo</p>
    ;
                }
                else
                {
                    pairshare =
    @<p>No Share in Pool</p>
    ;
                }
            }
            else
            {
                pairliquid =
    @<p>No Liquidate in Pool</p>
    ;
                pairshare =
    @<p>No Share in Pool</p>
    ;
            }

        }
        else
        {
            HavePool = false;
            pairinfo =
    @<p>Pool Not Exists.</p>
    ;
        }

    }
}
