@page "/login"
@page "/login/{src}"
@using Blazored.LocalStorage
@using Fluxor
@using Nebula.Store.WebWalletUseCase
@inject NavigationManager Navigation

@if (busy)
{
    <div style="z-index: 5;" class="spinner"></div>
}
else if(src == "key")
{
    <UserLibrary.Components.CreateWithPrivateKey OnFinished="@(() => {hasStore = true; Navigation.NavigateTo("/login");})" />
}
else if(hasStore)
{
    <UserLibrary.Components.OpenWithPassword />
}
else
{
    <UserLibrary.Components.CreateWithPassword OnFinished="@(() => {hasStore = true;})" />
}

@code{
    [Parameter]
    public string src { get; set; }

    [Inject]
    private IState<WebWalletState> walletState { get; set; }

    [Inject]
    private IDispatcher Dispatcher { get; set; }

    [Inject]
    public ILocalStorageService _localStorage { get; set; }

    bool hasStore = false;
    bool busy = true;

    protected async override Task OnInitializedAsync()
    {
        if(walletState.Value.wallet != null)
        {
            Navigation.NavigateTo("wallet");
        }

        var storeName = "nebstor";
        busy = true;
        StateHasChanged();

        if (await _localStorage.ContainKeyAsync(storeName))
            hasStore = true;
        else
            hasStore = false;

        busy = false;
        await base.OnInitializedAsync();
    }
}