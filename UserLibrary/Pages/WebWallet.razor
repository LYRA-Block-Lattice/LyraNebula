@namespace UserLibrary.Pages
@page "/webwallet"
@page "/wallet"
@page "/wallet/{action}/{target}"

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using BlazorZXingJs
@using Fluxor
@using Lyra.Core.API
@using Lyra.Data.API
@using Lyra.Data.Crypto
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Nebula.Store.WebWalletUseCase
@using Nebula.Data
@using Microsoft.Extensions.Configuration
@using Blazored.LocalStorage
@using Microsoft.Extensions.Logging
@using Microsoft.Extensions.Options
@inject IConfiguration Configuration
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject ILogger<WebWallet> logger
@inject ILyraAPI lyraClient
@using UserLibrary.Components
@using Blazorise.Snackbar

@if (walletState.Value.IsLoading || busy || busysend)
{
    <div style="z-index: 5;" class="spinner"></div>
}

@if (!string.IsNullOrEmpty(walletState.Value.error))
{
    <p>
        @walletState.Value.error
    </p>
}

@if (walletState.Value.wallet != null)
{
<Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged" 
    Mode="TabsMode.LazyLoad"
    Justified="true">
    <Items>
        <Tab Name="home">Home</Tab>
        <Tab Name="staking">Staking</Tab>
		<Tab Name="dex">DEX</Tab>
        <Tab Name="settings">Settings</Tab>
		@if (!string.IsNullOrWhiteSpace(Configuration["faucetPvk"]) && Configuration["network"] != "mainnet" && walletState.Value.wallet.BaseBalance == 0m && !walletState.Value.freeTokenSent)
			{				
				<Tab Name="free">Free Token</Tab>
			}
			
	</Items>
    <Content>
        <TabPanel Name="home" Margin="Margin.Is4.OnY">

			<Buttons Role="ButtonsRole.Toolbar">
				<Buttons>
					<Button Loading="@busy" Color="Color.Success" Clicked="@Refresh">Receive</Button>
					<Button Color="Color.Info" Clicked="@ToggleSend">Transfer</Button>
				</Buttons>
			</Buttons>

			@if(showsend)
			{
				<div class="simp">
					<p>
						Destination Wallet Address:<br />
						<TextEdit TValue="string" Placeholder="Address" @bind-Text="@dstAddr" /> 						
						<a href="/scan">
							<Button Color="Color.Primary">Scan QR-Code</Button>	
						</a>
					</p>
					<p>
						Token Name:<br />
						<TextEdit TValue="string" Placeholder="Name" @bind-Text="@tokenName" /> 
					</p>
					<p>
						Amount:<br />
						<NumericEdit TValue="decimal" Placeholder="Amount" @bind-Value="@amount" /> 
					</p>
					<Button Color="Color.Primary" Loading="@busysend" Clicked="@SendTokenAsync">Send Token</Button>
				</div>

				<Divider />
			}

			<div class="cet">				
			@if (walletState.Value.wallet.GetLatestBlock() != null)
            {
                @foreach (var kvp in walletState.Value.wallet.GetLatestBlock().Balances)
                {
					<Card Style="height:150px; width:280px;">
					<CardHeader Style="display: flex; align-items: center; justify-content: space-between;">
						<Div Style="font-size: large; font-weight:bolder;">
							@kvp.Key.Replace("tether/", "$")
						</Div>
						<Button Color="Color.Light" 
							Clicked="@(async ()=>{ await SendX(kvp.Key); })">Send</Button>
					</CardHeader>
						<CardBody>
							<CardTitle Size="5"><b>@($"{kvp.Value.ToBalanceDecimal():N4}")</b></CardTitle>
							<CardText>
								
							</CardText>
							
						</CardBody>
					</Card>
                }

					<Card Style="height:150px; width:280px;">
					<CardHeader>
						<CardTitle>Your New Token</CardTitle>
					</CardHeader>
						<CardBody>
							<Div Style="height: 100%; display: flex; align-items: center; justify-content: center">
								<a href="mint"><Icon Name="@("fa-plus-circle")" IconSize="IconSize.x3" /></a>
							</Div>
						</CardBody>
					</Card>
            }

			</div>

        </TabPanel>
		<TabPanel Name="staking" Margin="Margin.Is4.OnY">
		@if(walletState.Value.brokerAccounts != null)
		{
					<Staking />
				}
				else
				{
					Dispatcher.Dispatch(new WebWalletStakingAction { wallet = walletState.Value.wallet });
					<p>Refreshing...</p>
				}

        </TabPanel>
        <TabPanel Name="dex" Margin="Margin.Is4.OnY">
            <UserLibrary.Components.DexWallets />
        </TabPanel>
        <TabPanel Name="settings" Margin="Margin.Is4.OnY">

    <div>
		<h3>Scan to Pay Me</h3>
		<p><QRCodeWriter Text="@walletState.Value.wallet.AccountId" Width="300" Heigth="300"></QRCodeWriter></p>
		<Divider />
        <p><span title="Click to toggle to display" @onclick="ToggleKey">Your wallet's private key is (click to unhide/hide): </span><span>@altDisplay</span></p>
        <p>Your wallet's address is: <a href="/showblock/@walletState.Value.wallet.AccountId">@walletState.Value.wallet.AccountId</a></p>
        <p>Your wallet's balance is: @walletState.Value.balanceString</p>
        <p>Your are now voting for: @walletState.Value.wallet.VoteFor</p>

        <p>
            Vote For Address:
            <TextEdit TValue="string" Placeholder="Address" @bind-Text="@voteAddr" /> 
        </p>
        <div>
            <p style="color: red">Please save private key properly if you want to open this wallet again.</p>
        </div>
        <hr />
                        <button class="btn btn-primary" @onclick="Transactions">
                    Transactions
                </button>
		    @if (walletState.Value.txs != null)
    {
        <pre>
            @foreach (var tx in walletState.Value.txs)
            {
                @tx <br />

            }
                        </pre>
    }
        &nbsp;<button class="btn btn-primary" @onclick="SaveSettings">Save</button>
		&nbsp;<button class="btn btn-primary" @onclick="CloseWallet">Close Wallet</button>
    </div>
        </TabPanel>

		        @if (!string.IsNullOrWhiteSpace(Configuration["faucetPvk"]) && Configuration["network"] != "mainnet" && walletState.Value.wallet.BaseBalance == 0m && !walletState.Value.freeTokenSent) //&& walletState.Value.freeTokenTimes < 3
        {
            <TabPanel Name="free" Margin="Margin.Is4.OnY">
                    <div>
        <p>Current balance of faucet account: <em>@walletState.Value.faucetBalance</em> LYR</p>
    </div>

    @*    <div class="section">
        <ReCAPTCHA @ref="reCAPTCHAComponent" SiteKey="6Lftd8gZAAAAAK5G9aHUFY7wtV1yocfAf2Vj-EmI" OnSuccess="OnSuccess" OnExpired="OnExpired" />
        </div>*@

    <div class="section">
        <button class="btn btn-success" @onclick="OnClickPost" disabled="@walletState.Value.DisablePostButton">
            Send me Token!
        </button>
        &nbsp;&nbsp;
        <button class="btn btn-primary" @onclick="Return">Return</button>
    </div>
            </TabPanel>
        }

    </Content>
	</Tabs>

	<SnackbarStack @ref="snackbarStack" Location="SnackbarStackLocation.Right" />
}
else
{
	try
	{
		Navigation.NavigateTo("login");
	}
    catch(Exception e)
	{

	}
}
