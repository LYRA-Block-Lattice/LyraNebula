@namespace UserLibrary.Pages
@page "/webwallet"
@page "/wallet"

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using Lyra.Core.API
@using Lyra.Data.API
@using Lyra.Data.Crypto
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Nebula.Store.WebWalletUseCase
@using Nebula.Data
@using Microsoft.Extensions.Configuration
@using Blazored.LocalStorage
@using Microsoft.Extensions.Logging
@using Microsoft.Extensions.Options
@inject IConfiguration Configuration
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject ILogger<WebWallet> logger
@inject ILyraAPI lyraClient
@using UserLibrary.Components;

<Styled>
    .cet {
		padding-top: 25px;
        display: inline-flex;
        flex-wrap: wrap;
		flex-flow: column wrap;
		flex-direction: row;
		gap: 25px;
    }
    .pad {
        padding-top: 25px;
		display: block;
    }

</Styled>

@if (walletState.Value.IsLoading)
{
    <div style="z-index: 5;" class="spinner"></div>
}

@if (!string.IsNullOrEmpty(walletState.Value.error))
{
    <p>
        <AntDesign.Alert Type="@AntDesign.AlertType.Error"
           Message="Wallet Operation Error"
           Description="@walletState.Value.error"
           ShowIcon="true" Closable OnClose="ClearError" />
    </p>
}

@if (walletState.Value.wallet != null)
{
<Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged" 
    Mode="TabsMode.LazyLoad"
    Justified="true">
    <Items>
        <Tab Name="home">Home</Tab>
		<Tab Name="send">Send</Tab>
        <Tab Name="staking">Staking</Tab>
		<Tab Name="dex">DEX</Tab>
        <Tab Name="settings">Settings</Tab>
		@if (!string.IsNullOrWhiteSpace(Configuration["faucetPvk"]) && Configuration["network"] != "mainnet" && walletState.Value.wallet.BaseBalance == 0m && !walletState.Value.freeTokenSent)
			{				
				<Tab Name="free">Free Token</Tab>
			}
			
	</Items>
    <Content>
        <TabPanel Name="home">
			<div class="cet">
				<Button Color="Color.Primary" Block Clicked="@Refresh">Receive</Button>
			@if (walletState.Value.wallet.GetLatestBlock() != null)
            {
                @foreach (var kvp in walletState.Value.wallet.GetLatestBlock().Balances)
                {
					<Card Margin="Margin.Is4.OnY" Style="height:180px; width:280px;">
					<CardHeader>
						<CardTitle>@kvp.Key.Replace("tether/", "$")</CardTitle>
					</CardHeader>
						<CardBody>
							<CardTitle Size="5"><b>@($"{kvp.Value.ToBalanceDecimal():N4}")</b></CardTitle>
							<CardText>
								
							</CardText>
							<Button Color="Color.Light" Clicked="@(async ()=>{ await SendX(kvp.Key); })">Send</Button>
						</CardBody>
					</Card>
                }

					<Card Margin="Margin.Is4.OnY" Style="height:180px; width:280px;">
					<CardHeader>
						<CardTitle>Your New Token</CardTitle>
					</CardHeader>
						<CardBody>
							<CardTitle Size="5"></CardTitle>
							<CardText>
								
							</CardText>
							<a href="mint"><Button Color="Color.Primary">Create</Button></a>
						</CardBody>
					</Card>
            }
			</div>

        </TabPanel>
        <TabPanel Name="send">
                <div class="pad">
				<p>
					Destination Wallet Address:<br />
					<AntDesign.Input TValue="string" Placeholder="Address" @bind-Value="@dstAddr" /> 
				</p>
				<p>
					Token Name:<br />
					<AntDesign.Input TValue="string" Placeholder="Name" @bind-Value="@tokenName" /> 
				</p>
				<p>
					Amount:<br />
					<AntDesign.Input TValue="decimal" Placeholder="Amount" @bind-Value="@amount" /> 
				</p>
				<button class="btn btn-primary" @onclick="SendToken">Send Token</button>
			</div>
        </TabPanel>
		        <TabPanel Name="staking">
		@if(walletState.Value.brokerAccounts != null)
		{
					<Staking />
				}
				else
				{
					Dispatcher.Dispatch(new WebWalletStakingAction { wallet = walletState.Value.wallet });
					<p>Refreshing...</p>
				}

        </TabPanel>
        <TabPanel Name="dex">
            <UserLibrary.Components.DexWallets />
        </TabPanel>
        <TabPanel Name="settings">

    <div>
        <p><span title="Click to toggle to display" @onclick="ToggleKey">Your wallet's private key is (click to unhide/hide): </span><span>@altDisplay</span></p>
        <p>Your wallet's address is: <a href="/showblock/@walletState.Value.wallet.AccountId">@walletState.Value.wallet.AccountId</a></p>
        <p>Your wallet's balance is: @walletState.Value.balanceString</p>
        <p>Your are now voting for: @walletState.Value.wallet.VoteFor</p>

        <p>
            Vote For Address:
            <AntDesign.Input TValue="string" Placeholder="Address" @bind-Value="@voteAddr" /> 
        </p>
        <div>
            <p style="color: red">Please save private key properly if you want to open this wallet again.</p>
        </div>
        <hr />
                        <button class="btn btn-primary" @onclick="Transactions">
                    Transactions
                </button>
		    @if (walletState.Value.txs != null)
    {
        <pre>
            @foreach (var tx in walletState.Value.txs)
            {
                @tx <br />

            }
                        </pre>
    }
        &nbsp;<button class="btn btn-primary" @onclick="SaveSettings">Save</button>
		&nbsp;<button class="btn btn-primary" @onclick="CloseWallet">Close Wallet</button>
    </div>
        </TabPanel>

		        @if (!string.IsNullOrWhiteSpace(Configuration["faucetPvk"]) && Configuration["network"] != "mainnet" && walletState.Value.wallet.BaseBalance == 0m && !walletState.Value.freeTokenSent) //&& walletState.Value.freeTokenTimes < 3
        {
            <TabPanel Name="free">
                    <div>
        <p>Current balance of faucet account: <em>@walletState.Value.faucetBalance</em> LYR</p>
    </div>

    @*    <div class="section">
        <ReCAPTCHA @ref="reCAPTCHAComponent" SiteKey="6Lftd8gZAAAAAK5G9aHUFY7wtV1yocfAf2Vj-EmI" OnSuccess="OnSuccess" OnExpired="OnExpired" />
        </div>*@

    <div class="section">
        <button class="btn btn-success" @onclick="OnClickPost" disabled="@walletState.Value.DisablePostButton">
            Send me Token!
        </button>
        &nbsp;&nbsp;
        <button class="btn btn-primary" @onclick="Return">Return</button>
    </div>
            </TabPanel>
        }

    </Content>
	</Tabs>
}
else
{
	try
	{
		Navigation.NavigateTo("login");
	}
    catch(Exception e)
	{

	}
}

@code{
    		[Inject]
		private IState<WebWalletState> walletState { get; set; }

		[Inject]
		private IDispatcher Dispatcher { get; set; }

		[Inject]
		private IJSRuntime JS { get; set; }

		[Inject] INotificationService NotificationService { get; set; }

        		public string prvKey { get; set; }
		public bool selfVote { get; set; }

		// for send
		public string dstAddr { get; set; }
		public string tokenName { get; set; }
		public decimal amount { get; set; }

		// for settings
		public string voteAddr { get; set; }

		public string altDisplay { get; set; }

	string selectedTab = "home";

    private Task OnSelectedTabChanged( string name )
    {
        selectedTab = name;

        return Task.CompletedTask;
    }

		public WebWallet()
        {
			tokenName = "LYR";
			altDisplay = "************";			
		}

        private void ToggleKey(MouseEventArgs e)
		{
			if (altDisplay == "************")
				altDisplay = walletState?.Value?.wallet?.PrivateKey;
			else
				altDisplay = "************";
		}

		private void CloseWallet(MouseEventArgs e)
		{
			Dispatcher.Dispatch(new WebWalletCloseAction());
            Navigation.NavigateTo("/login");
		}

		private void CreateToken()
        {
			NotificationService.Info( "Under construction. Will be avaliable soon!" );
		}

		private void CreateWallet(MouseEventArgs e)
        {
			altDisplay = "************";

			Dispatcher.Dispatch(new WebWalletCreateAction{name = "tmp", password = "tmp"});
		}

		private async void RestoreWallet(MouseEventArgs e)
		{
			altDisplay = "************";

			if (string.IsNullOrWhiteSpace(prvKey))
            {
				await JS.InvokeAsync<object>("alert", "Private Key can't be empty.");
				return;
			}
            else
            {
				try
                {
					Base58Encoding.DecodePrivateKey(prvKey);
					Dispatcher.Dispatch(new WebWalletRestoreAction { privateKey = prvKey, selfVote = this.selfVote });
				}
				catch (Exception)
                {
					await JS.InvokeAsync<object>("alert", "Private Key specified is not valid.");
					return;
				}
            }
		}

		private void Refresh()
        {
			Dispatcher.Dispatch(new WebWalletRefreshBalanceAction { wallet = walletState.Value.wallet });
        }

		private void Staking(MouseEventArgs e)
		{
			Dispatcher.Dispatch(new WebWalletStakingAction { wallet = walletState.Value.wallet });
		}

		private void ClearError()
		{
			Dispatcher.Dispatch(new WalletErrorResetAction());
		}

		private void OnSuccess()
		{
			Dispatcher.Dispatch(new WebWalletReCAPTCHAValidAction { ValidReCAPTCHA = true });
		}

		private void OnExpired()
		{
			Dispatcher.Dispatch(new WebWalletReCAPTCHAValidAction { ValidReCAPTCHA = false });
		}

		private async Task OnClickPost()
		{
			Dispatcher.Dispatch(new WebWalletSendMeFreeTokenAction
			{
				wallet = walletState.Value.wallet,
				faucetPvk = Configuration["faucetPvk"]
			});
			return;

			/*        if (walletState.Value.ValidReCAPTCHA)
					{
						var response = await reCAPTCHAComponent.GetResponseAsync();
						try
						{
							Dispatcher.Dispatch(new WebWalletReCAPTCHAServerAction { ServerVerificatiing = true });

							var result = await SampleAPI.Post(response);
							if (result.Success)
							{
								Dispatcher.Dispatch(new WebWalletSendMeFreeTokenAction
									{
										wallet = walletState.Value.wallet,
										faucetPvk = Configuration["faucetPvk"]
									});
								//Navigation.NavigateTo("/valid");
							}
							else
							{
								await JS.InvokeAsync<object>("alert", string.Join(", ", result.ErrorCodes));

								Dispatcher.Dispatch(new WebWalletReCAPTCHAServerAction { ServerVerificatiing = false });
							}
						}
						catch (HttpRequestException e)
						{
							await JS.InvokeAsync<object>("alert", e.Message);

							Dispatcher.Dispatch(new WebWalletReCAPTCHAServerAction { ServerVerificatiing = false });
						}
					}*/
		}

		//protected override async Task OnAfterRenderAsync(bool firstRender)
		//{
		//	var key = Configuration["network"] + "freelyr";
		//	if (walletState.Value.freeTokenTimes.HasValue)
		//	{
		//		// if it need save
		//		var oldValue = await localStore.GetItemAsync<string>(key);
		//		int oldCount;
		//		if (oldValue == null || (int.TryParse(oldValue, out oldCount) && oldCount < walletState.Value.freeTokenTimes))
		//		{
		//			await localStore.SetItemAsync(key, walletState.Value.freeTokenTimes.ToString());
		//		}
		//	}
		//	else
		//	{
		//		var oldValue = await localStore.GetItemAsync<string>(key);
		//		int oldCount;
		//		if (oldValue != null && int.TryParse(oldValue, out oldCount))
		//		{
		//			walletState.Value.freeTokenTimes = oldCount;
		//		}
		//		else
		//		{
		//			walletState.Value.freeTokenTimes = 0;
		//		}
		//	}
		//}

		private async Task Send(MouseEventArgs e)
		{
			if(walletState.Value.wallet.BaseBalance > 1)
				Dispatcher.Dispatch(new WebWalletSendAction {   });
			else
				await JS.InvokeAsync<object>("alert", "Nothing to send.");
		}

		private async Task SendX(string name)
		{
			tokenName = name;
			selectedTab = "send";
			if (walletState.Value.wallet.BaseBalance > 1)
				Dispatcher.Dispatch(new WebWalletSendAction { });
			else
				await JS.InvokeAsync<object>("alert", "Nothing to send.");
		}

		private void SendToken(MouseEventArgs e)
		{
			Dispatcher.Dispatch(new WebWalletSendTokenAction { DstAddr = dstAddr, TokenName = tokenName, Amount = amount, wallet = walletState.Value.wallet });
		}

		private void CancelSend(MouseEventArgs e)
		{
			Dispatcher.Dispatch(new WebWalletCancelSendAction ());
		}

		private void Settings(MouseEventArgs e)
		{
			voteAddr = walletState.Value.wallet.VoteFor;
			Dispatcher.Dispatch(new WebWalletSettingsAction { });
		}

		private void SaveSettings(MouseEventArgs e)
        {
			Dispatcher.Dispatch(new WebWalletSaveSettingsAction { VoteFor = voteAddr });
        }

		private void CancelSave(MouseEventArgs e)
		{
			Dispatcher.Dispatch(new WebWalletCancelSaveSettingsAction { });
		}

		private void Transactions(MouseEventArgs e)
		{
			Dispatcher.Dispatch(new WebWalletTransactionsAction { wallet = walletState.Value.wallet });
		}

		private void Return(MouseEventArgs e)
		{
			Dispatcher.Dispatch(new WebWalletCancelSaveSettingsAction { });
		}

		private void FreeToken(MouseEventArgs e)
		{
			Dispatcher.Dispatch(new WebWalletFreeTokenAction { faucetPvk = Configuration["faucetPvk"] });
		}

		private void StartDex(MouseEventArgs e)
		{		
			Dispatcher.Dispatch(new WebWalletStartDexAction());
		}
}