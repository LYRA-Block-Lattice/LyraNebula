@namespace UserLibrary.Pages

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Nebula.Store.WebWalletUseCase
@using Nebula.Data
@using Microsoft.Extensions.Configuration
@using Blazored.LocalStorage
@using Microsoft.Extensions.Logging
@using Microsoft.Extensions.Options
@inject IConfiguration Configuration
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject ILogger<WebWallet> logger
@inject ILyraAPI lyraClient
@using UserLibrary.Components;

@if (walletState.Value.IsLoading)
{
    <div class="spinner"></div>
}

@if (!string.IsNullOrEmpty(walletState.Value.error))
{
    <p>
        <Alert Type="@AlertType.Error"
           Message="Wallet Operation Error"
           Description="@walletState.Value.error"
           ShowIcon="true" Closable OnClose="ClearError" />
    </p>
}

@if (walletState.Value.IsOpening && walletState.Value.stage == UIStage.Main)
{
    <div>
        <Space Size=@(("8", "16")) Wrap>
            <SpaceItem>
                <button class="btn btn-primary" @onclick="Send">
                    Send
                </button>
            </SpaceItem>

            <SpaceItem>
                <button class="btn btn-primary" @onclick="Refresh">
                    Receive
                </button>
            </SpaceItem>

            <SpaceItem>
                <button class="btn btn-primary" @onclick="Staking">
                    Staking
                </button>
            </SpaceItem>

            <SpaceItem>
                <button class="btn btn-primary" @onclick="StartDex">
                    DEX
                </button>
            </SpaceItem>

            <SpaceItem>&nbsp;</SpaceItem>

            <SpaceItem>
                <button class="btn btn-primary" @onclick="Transactions">
                    Transactions
                </button>
            </SpaceItem>

            <SpaceItem>
                <button class="btn btn-primary" @onclick="Settings">
                    Settings
                </button>
            </SpaceItem>

            <SpaceItem>&nbsp;</SpaceItem>

            <SpaceItem>
                <button class="btn btn-primary" @onclick="CloseWallet">
                    Close
                </button>
            </SpaceItem>

        </Space>
        &nbsp;&nbsp;&nbsp;
        @if (Configuration["network"] != "mainnet" && walletState.Value.wallet.BaseBalance == 0m && walletState.Value.freeTokenTimes < 3 && !walletState.Value.freeTokenSent)
        {
            <span>
                <button style="float: right;" class="btn btn-success" @onclick="FreeToken">
                    Get Free Token
                </button>
            </span>
        }
    </div>
    <hr />
    <div>
        <Space Wrap>
            @if (walletState.Value.wallet.GetLatestBlock() != null)
            {
                @foreach (var kvp in walletState.Value.wallet.GetLatestBlock().Balances)
                {
                    <SpaceItem>
                        <Card Title="@kvp.Key" Style="width:300px;">
                            <Extra>
                                <Button Type="@ButtonType.Text" OnClick="@(async ()=>{ await SendX(kvp.Key); })">
                                    Send
                                </Button>
                            </Extra>
                            <Body>
                                <p style="font-size: xx-large;"><b>@($"{kvp.Value.ToBalanceDecimal():N2}")</b></p>
                            </Body>
                        </Card>
                    </SpaceItem>
                }
            }


        </Space>


    </div>

}
else if (walletState.Value.IsOpening && walletState.Value.stage == UIStage.DEX)
{
    <div>
        <button class="btn btn-primary" @onclick="CancelSave">Return</button>
    </div>
    <hr />
    <h3>Lyra DEX</h3>
    <hr />
    <div>
        <UserLibrary.Components.DexWallets></UserLibrary.Components.DexWallets>
    </div>
    <hr />
    <div>
        <button class="btn btn-primary" @onclick="CancelSave">Return</button>
    </div>
}
else if (walletState.Value.IsOpening && walletState.Value.stage == UIStage.Staking)
{
    <div>
        <button class="btn btn-primary" @onclick="CancelSave">Return</button>
    </div>
    <hr />
    <h3>Staking</h3>
    <hr />
    <p>
        <div><h4>All Stakings</h4></div>
        <div>
            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Staking Amount</th>
                        <th>Compound Mode</th>
                        <th>Total Reward</th>
                        <th>Start Time</th>
                        <th>Staking Days</th>
                        <th>Staking to Account</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var stk in walletState.Value.brokerAccounts.Where(a => a is StakingGenesis)
                   .Cast<StakingGenesis>())
                    {
                        <tr>
                            <td>@stk.Name</td>
                            @if (walletState.Value.stkBalances != null)
                            {
                                <td>@walletState.Value.stkBalances[stk.AccountID]</td>
                            }
                            else
                            {
                                <td>0</td>
                            }
                            <td>@stk.CompoundMode</td>
                            <td>@walletState.Value.stkRewards[stk.AccountID]</td>
                            <td>@stk.TimeStamp</td>
                            <td>@stk.Days</td>
                            <td>@stk.Voting</td>
                            <td>
                                <a href="" @onclick="@(e => AddStkAsync(e, stk.AccountID))" @onclick:preventDefault><u>Add Staking</u></a>
                                &nbsp;
                                <Popconfirm Title="Unstaking within the promised staking period will pay 0.8% panalise fee. "
                                    OnConfirm="@(e => RmStk(e, stk.AccountID))"
                                    OkText="Yes, I know."
                                    CancelText="No, cancel unstaking">
                                    <a style="color:blue"><u>Unstaking</u></a>
                                </Popconfirm>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </p>
    <p>
        <div><h4>All Profiting</h4></div>
        <div>
            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Share Ratio</th>
                        <th>Seats</th>
                        <th>Profiting Account ID</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var pft in walletState.Value.brokerAccounts.Where(a => a is ProfitingGenesis)
                   .Cast<ProfitingGenesis>())
                    {
                        <tr>
                            <td>@pft.Name</td>
                            <td>@pft.PType</td>
                            <td>@pft.ShareRito</td>
                            <td>@pft.Seats</td>
                            <td>
                                @pft.AccountID
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </p>

    <div>
        <h3>Create new staking account</h3>
        <p>
            Name:
            <input size="60" type="text" @bind="@stkName" />
        </p>
        <p>
            Staking For Address:
            <input size="100" type="text" @bind="@stkVoting" />
        </p>
        <p>
            Days of staking:
            <input size="10" type="text" @bind="@stkDays" />
        </p>
        <p>
            Compound staking mode:
            <input size="10" type="checkbox" @bind="@stkCompound" />
        </p>
        <div>
            <button class="btn btn-primary" @onclick="StakingCreate">Create Staking</button>
        </div>
    </div>
    <hr />
    <div>
        <h3>Create new profiting account</h3>
        <p>
            Name:
            <input size="60" type="text" @bind="@pftName" />
        </p>
        <p>
            Type:
            <select style="height: 40px; width: 380px" @bind="@pftType">
                <option value="Node">Node</option>
                <option disabled value="Oracle">Oracle</option>
                <option disabled value="Merchant">Merchant</option>
                <option value="Yield">Yield</option>
            </select>
        </p>
        <p>
            Ratio to share to staking (0% - 100%):
            <input size="10" type="text" @bind="@pftShare" />
        </p>
        <p>
            Number of staking (0 - 100):
            <input size="10" type="text" @bind="@pftSeats" />
        </p>
        <div>
            <button class="btn btn-primary" @onclick="ProfitingCreate">Create Profiting Account</button>
        </div>
    </div>
    <hr />
    <div>
        <button class="btn btn-primary" @onclick="CancelSave">Return</button>
    </div>
}
else if (walletState.Value.IsOpening && walletState.Value.stage == UIStage.Settings)
{
    <h3>Settings</h3>
    <hr />
    <div>
        <p><span title="Click to toggle to display" @onclick="ToggleKey">Your wallet's private key is (click to unhide/hide): </span><span>@altDisplay</span></p>
        <p>Your wallet's address is: <a href="/showblock/@walletState.Value.wallet.AccountId">@walletState.Value.wallet.AccountId</a></p>
        <p>Your wallet's balance is: @walletState.Value.balanceString</p>
        <p>Your are now voting for: @walletState.Value.wallet.VoteFor</p>

        <p>
            Vote For Address:
            <input size="100" type="text" @bind="@voteAddr" />
        </p>
        <div>
            <p style="color: red">Please save private key properly if you want to open this wallet again.</p>
        </div>
        <hr />

        <button class="btn btn-primary" @onclick="SaveSettings">Save</button>
        <button class="btn btn-primary" @onclick="CancelSave">Cancel</button>
    </div>
}
else if (walletState.Value.IsOpening && walletState.Value.stage == UIStage.Send)
{
    <h3>Sending token</h3>
    <hr />
    <div>
        <p>
            Destination Wallet Address:<br />
            <input size="120" type="text" @bind="@dstAddr" />
        </p>
        <p>
            Token Name:<br />
            <input size="20" type="text" @bind="@tokenName" />
        </p>
        <p>
            Amount:<br />
            <input size="20" type="text" @bind="@amount" />
        </p>
        <hr />
        <button class="btn btn-primary" @onclick="SendToken">Send Token</button>
        <button class="btn btn-primary" @onclick="CancelSend">Cancel</button>
    </div>

}
else if (walletState.Value.IsOpening && walletState.Value.stage == UIStage.Transactions)
{
    <h3>Transactions</h3>
    <hr />
    <div>
        <button class="btn btn-primary" @onclick="Return">Return</button>
    </div>
    @if (walletState.Value.txs != null)
    {
        <pre>
            @foreach (var tx in walletState.Value.txs)
            {
                @tx <br />

            }
                        </pre>
        <div>
            <button class="btn btn-primary" @onclick="Return">Return</button>
        </div>
    }
}
else if (walletState.Value.IsOpening && walletState.Value.stage == UIStage.FreeToken)
{
    <h3>Verify and get free LYR</h3>
    <hr />
    <div>
        <p>Current balance of faucet account: <em>@walletState.Value.faucetBalance</em> LYR</p>
    </div>

    @*    <div class="section">
        <ReCAPTCHA @ref="reCAPTCHAComponent" SiteKey="6Lftd8gZAAAAAK5G9aHUFY7wtV1yocfAf2Vj-EmI" OnSuccess="OnSuccess" OnExpired="OnExpired" />
        </div>*@

    <div class="section">
        <button class="btn btn-success" @onclick="OnClickPost" disabled="@walletState.Value.DisablePostButton">
            Send me Token!
        </button>
        &nbsp;&nbsp;
        <button class="btn btn-primary" @onclick="Return">Return</button>
    </div>
}
else
{
    <div>
        <button class="btn btn-primary" @onclick="CreateWallet">
            Create New Wallet
        </button>
    </div>
    <hr />
    <div>
        <p>Private Key:</p>
        <p><input size="100" type="text" @bind="prvKey" /></p>
        <p>
            <button class="btn btn-primary" @onclick="RestoreWallet">
                Restore Wallet
            </button>
        </p>
    </div>
}

