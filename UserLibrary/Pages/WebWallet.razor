@namespace UserLibrary.Pages
@page "/webwallet"
@page "/wallet"
@page "/wallet/{action}/{target}"

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using BlazorZXingJs
@using Fluxor
@using Lyra.Core.API
@using Lyra.Data.API
@using Lyra.Data.Crypto
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Nebula.Store.WebWalletUseCase
@using Nebula.Data
@using Microsoft.Extensions.Configuration
@using Blazored.LocalStorage
@using Microsoft.Extensions.Logging
@using Microsoft.Extensions.Options
@inject IConfiguration Configuration
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject ILogger<WebWallet> logger
@inject ILyraAPI lyraClient
@using UserLibrary.Components;

@if (walletState.Value.IsLoading || busy)
{
    <div style="z-index: 5;" class="spinner"></div>
}

@if (!string.IsNullOrEmpty(walletState.Value.error))
{
    <p>
        @walletState.Value.error
    </p>
}

@if (walletState.Value.wallet != null)
{
<Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged" 
    Mode="TabsMode.LazyLoad"
    Justified="true">
    <Items>
        <Tab Name="home">Home</Tab>
        <Tab Name="staking">Staking</Tab>
		<Tab Name="dex">DEX</Tab>
        <Tab Name="settings">Settings</Tab>
		@if (!string.IsNullOrWhiteSpace(Configuration["faucetPvk"]) && Configuration["network"] != "mainnet" && walletState.Value.wallet.BaseBalance == 0m && !walletState.Value.freeTokenSent)
			{				
				<Tab Name="free">Free Token</Tab>
			}
			
	</Items>
    <Content>
        <TabPanel Name="home" Margin="Margin.Is4.OnY">

			<Buttons Role="ButtonsRole.Toolbar">
				<Buttons>
					<Button Loading="@busy" Color="Color.Success" Clicked="@Refresh">Receive</Button>
					<Button Color="Color.Info" Clicked="@ToggleSend">Transfer</Button>
				</Buttons>
			</Buttons>

			@if(showsend)
			{
				<div class="simp">
					<p>
						Destination Wallet Address:<br />
						<TextEdit TValue="string" Placeholder="Address" @bind-Text="@dstAddr" /> 						
						<a href="/scan">
							<Button Color="Color.Primary">Scan QR-Code</Button>	
						</a>
					</p>
					<p>
						Token Name:<br />
						<TextEdit TValue="string" Placeholder="Name" @bind-Text="@tokenName" /> 
					</p>
					<p>
						Amount:<br />
						<NumericEdit TValue="decimal" Placeholder="Amount" @bind-Value="@amount" /> 
					</p>
					<Button Color="Color.Primary" Loading="@busysend" Clicked="@SendToken">Send Token</Button>
				</div>

				<Divider />
			}

			<div class="cet">				
			@if (walletState.Value.wallet.GetLatestBlock() != null)
            {
                @foreach (var kvp in walletState.Value.wallet.GetLatestBlock().Balances)
                {
					<Card Style="height:150px; width:280px;">
					<CardHeader Style="display: flex; align-items: center; justify-content: space-between;">
						<Div Style="font-size: large; font-weight:bolder;">
							@kvp.Key.Replace("tether/", "$")
						</Div>
						<Button Color="Color.Light" 
							Clicked="@(async ()=>{ await SendX(kvp.Key); })">Send</Button>
					</CardHeader>
						<CardBody>
							<CardTitle Size="5"><b>@($"{kvp.Value.ToBalanceDecimal():N4}")</b></CardTitle>
							<CardText>
								
							</CardText>
							
						</CardBody>
					</Card>
                }

					<Card Style="height:150px; width:280px;">
					<CardHeader>
						<CardTitle>Your New Token</CardTitle>
					</CardHeader>
						<CardBody>
							<Div Style="height: 100%; display: flex; align-items: center; justify-content: center">
								<a href="mint"><Icon Name="@("fa-plus-circle")" IconSize="IconSize.x3" /></a>
							</Div>
						</CardBody>
					</Card>
            }

			</div>

        </TabPanel>
		<TabPanel Name="staking" Margin="Margin.Is4.OnY">
		@if(walletState.Value.brokerAccounts != null)
		{
					<Staking />
				}
				else
				{
					Dispatcher.Dispatch(new WebWalletStakingAction { wallet = walletState.Value.wallet });
					<p>Refreshing...</p>
				}

        </TabPanel>
        <TabPanel Name="dex" Margin="Margin.Is4.OnY">
            <UserLibrary.Components.DexWallets />
        </TabPanel>
        <TabPanel Name="settings" Margin="Margin.Is4.OnY">

    <div>
		<h3>Scan to Pay Me</h3>
		<p><QRCodeWriter Text="@walletState.Value.wallet.AccountId" Width="300" Heigth="300"></QRCodeWriter></p>
		<Divider />
        <p><span title="Click to toggle to display" @onclick="ToggleKey">Your wallet's private key is (click to unhide/hide): </span><span>@altDisplay</span></p>
        <p>Your wallet's address is: <a href="/showblock/@walletState.Value.wallet.AccountId">@walletState.Value.wallet.AccountId</a></p>
        <p>Your wallet's balance is: @walletState.Value.balanceString</p>
        <p>Your are now voting for: @walletState.Value.wallet.VoteFor</p>

        <p>
            Vote For Address:
            <TextEdit TValue="string" Placeholder="Address" @bind-Text="@voteAddr" /> 
        </p>
        <div>
            <p style="color: red">Please save private key properly if you want to open this wallet again.</p>
        </div>
        <hr />
                        <button class="btn btn-primary" @onclick="Transactions">
                    Transactions
                </button>
		    @if (walletState.Value.txs != null)
    {
        <pre>
            @foreach (var tx in walletState.Value.txs)
            {
                @tx <br />

            }
                        </pre>
    }
        &nbsp;<button class="btn btn-primary" @onclick="SaveSettings">Save</button>
		&nbsp;<button class="btn btn-primary" @onclick="CloseWallet">Close Wallet</button>
    </div>
        </TabPanel>

		        @if (!string.IsNullOrWhiteSpace(Configuration["faucetPvk"]) && Configuration["network"] != "mainnet" && walletState.Value.wallet.BaseBalance == 0m && !walletState.Value.freeTokenSent) //&& walletState.Value.freeTokenTimes < 3
        {
            <TabPanel Name="free" Margin="Margin.Is4.OnY">
                    <div>
        <p>Current balance of faucet account: <em>@walletState.Value.faucetBalance</em> LYR</p>
    </div>

    @*    <div class="section">
        <ReCAPTCHA @ref="reCAPTCHAComponent" SiteKey="6Lftd8gZAAAAAK5G9aHUFY7wtV1yocfAf2Vj-EmI" OnSuccess="OnSuccess" OnExpired="OnExpired" />
        </div>*@

    <div class="section">
        <button class="btn btn-success" @onclick="OnClickPost" disabled="@walletState.Value.DisablePostButton">
            Send me Token!
        </button>
        &nbsp;&nbsp;
        <button class="btn btn-primary" @onclick="Return">Return</button>
    </div>
            </TabPanel>
        }

    </Content>
	</Tabs>
}
else
{
	try
	{
		Navigation.NavigateTo("login");
	}
    catch(Exception e)
	{

	}
}

@code{
	[Inject]
	private IState<WebWalletState> walletState { get; set; }

	[Inject]
	private IDispatcher Dispatcher { get; set; }

	[Inject]
	private IJSRuntime JS { get; set; }

	[Inject] INotificationService NotificationService { get; set; }

	[Parameter]
	public string action {  get;  set; }
	[Parameter]
	public string target {  get;  set; }

	bool busy, busysend;
	bool showsend;

	public string prvKey { get; set; }
	public bool selfVote { get; set; }

	// for send
	public string dstAddr { get; set; }
	public string tokenName { get; set; }
	public decimal amount { get; set; }

	// for settings
	public string voteAddr { get; set; }

	public string altDisplay { get; set; }

	string selectedTab = "home";

	protected override void OnInitialized()
	{		
		base.OnInitialized();
		if(walletState.Value.wallet == null)
		{
			Navigation.NavigateTo("login");
		}

		if(action != null && action != "send")
		{
			selectedTab = action;
		}

		if(action == "send" && target != null)
		{
			dstAddr = target;
			showsend = true;
		}		

		walletState.StateChanged += this.WalletChanged;
	}

	public void Dispose()
	{
		walletState.StateChanged -= this.WalletChanged;
	}

	private void WalletChanged(object sender, WebWalletState wallet)
	{
		busy = false;
		busysend = false;
	}

	private Task OnSelectedTabChanged( string name )
	{
		selectedTab = name;

		if(name == "free")
		{
			Dispatcher.Dispatch(new WebWalletSendMeFreeTokenAction
                        {
                            wallet = walletState.Value.wallet,
                            faucetPvk = Configuration["faucetPvk"]
                        });
		}

		if(name == "send")
		{
			dstAddr = target;
		}

		return Task.CompletedTask;
	}

	public WebWallet()
	{
		tokenName = "LYR";
		altDisplay = "************";			
	}

	private void ToggleKey(MouseEventArgs e)
	{
		if (altDisplay == "************")
			altDisplay = walletState?.Value?.wallet?.PrivateKey;
		else
			altDisplay = "************";
	}

	private void CloseWallet(MouseEventArgs e)
	{
		Dispatcher.Dispatch(new WebWalletCloseAction());
		Navigation.NavigateTo("/login");
	}

	private void CreateToken()
	{
		NotificationService.Info( "Under construction. Will be avaliable soon!" );
	}

	private void CreateWallet(MouseEventArgs e)
	{
		altDisplay = "************";

		Dispatcher.Dispatch(new WebWalletCreateAction{name = "tmp", password = "tmp"});
	}

	private async void RestoreWallet(MouseEventArgs e)
	{
		altDisplay = "************";

		if (string.IsNullOrWhiteSpace(prvKey))
		{
			await JS.InvokeAsync<object>("alert", "Private Key can't be empty.");
			return;
		}
		else
		{
			try
			{
				Base58Encoding.DecodePrivateKey(prvKey);
				Dispatcher.Dispatch(new WebWalletRestoreAction { privateKey = prvKey, selfVote = this.selfVote });
			}
			catch (Exception)
			{
				await JS.InvokeAsync<object>("alert", "Private Key specified is not valid.");
				return;
			}
		}
	}

	private void ToggleSend()
	{
		showsend = !showsend;
	}

	private void Refresh()
	{
		busy = true;
		Dispatcher.Dispatch(new WebWalletRefreshBalanceAction { wallet = walletState.Value.wallet });
	}

	private void Staking(MouseEventArgs e)
	{
		Dispatcher.Dispatch(new WebWalletStakingAction { wallet = walletState.Value.wallet });
	}

	private void ClearError()
	{
		Dispatcher.Dispatch(new WalletErrorResetAction());
	}

	private void OnSuccess()
	{
		Dispatcher.Dispatch(new WebWalletReCAPTCHAValidAction { ValidReCAPTCHA = true });
	}

	private void OnExpired()
	{
		Dispatcher.Dispatch(new WebWalletReCAPTCHAValidAction { ValidReCAPTCHA = false });
	}

	private async Task OnClickPost()
	{
		Dispatcher.Dispatch(new WebWalletSendMeFreeTokenAction
			{
				wallet = walletState.Value.wallet,
				faucetPvk = Configuration["faucetPvk"]
			});
		return;
}





		private async Task SendX(string name)
		{
			tokenName = name;
			showsend = true;
		}

		private void SendToken()
		{
			busysend = true;
			Dispatcher.Dispatch(new WebWalletSendTokenAction { DstAddr = dstAddr, TokenName = tokenName, Amount = amount, wallet = walletState.Value.wallet });
		}

		private void CancelSend(MouseEventArgs e)
		{
			Dispatcher.Dispatch(new WebWalletCancelSendAction ());
		}

		private void Settings(MouseEventArgs e)
		{
			voteAddr = walletState.Value.wallet.VoteFor;
			Dispatcher.Dispatch(new WebWalletSettingsAction { });
		}

		private void SaveSettings(MouseEventArgs e)
        {
			Dispatcher.Dispatch(new WebWalletSaveSettingsAction { VoteFor = voteAddr });
        }

		private void CancelSave(MouseEventArgs e)
		{
			Dispatcher.Dispatch(new WebWalletCancelSaveSettingsAction { });
		}

		private void Transactions(MouseEventArgs e)
		{
			Dispatcher.Dispatch(new WebWalletTransactionsAction { wallet = walletState.Value.wallet });
		}

		private void Return(MouseEventArgs e)
		{
			Dispatcher.Dispatch(new WebWalletCancelSaveSettingsAction { });
		}

		private void FreeToken(MouseEventArgs e)
		{
			Dispatcher.Dispatch(new WebWalletFreeTokenAction { faucetPvk = Configuration["faucetPvk"] });
		}
}